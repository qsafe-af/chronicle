[
  1635018093,
  {
    "V16": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Nonce",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 10,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "compact": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 16,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "sequence": {
                  "type": 17
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "def": {
                "sequence": {
                  "type": 20
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 21
                },
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 120,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 21,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 73,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "quantus_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 22,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "QPoW",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "pallet_qpow::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Wormhole",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "pallet_wormhole::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "MiningRewards",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "pallet_mining_rewards::Event<Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "pallet_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "pallet_preimage::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Referenda",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "pallet_referenda::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "ReversibleTransfers",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "pallet_reversible_transfers::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "ConvictionVoting",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "pallet_conviction_voting::Event<Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "TechCollective",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "pallet_ranked_collective::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "TechReferenda",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance1>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "MerkleAirdrop",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "pallet_merkle_airdrop::Event<Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "TreasuryPallet",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "pallet_recovery::Event<Runtime>"
                        }
                      ],
                      "index": 20
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchEventInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 26,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchEventInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upgrade was authorized."
                      ]
                    },
                    {
                      "name": "RejectedInvalidAuthorizedUpgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An invalid authorized upgrade was rejected while trying to apply it."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_system",
                "DispatchEventInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    },
                    {
                      "name": "Trie",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "TrieError"
                        }
                      ],
                      "index": 14
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 18,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "sp_runtime",
                "proving_trie",
                "TrieError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidStateRoot",
                      "index": 0
                    },
                    {
                      "name": "IncompleteDatabase",
                      "index": 1
                    },
                    {
                      "name": "ValueAtIncompleteKey",
                      "index": 2
                    },
                    {
                      "name": "DecoderError",
                      "index": 3
                    },
                    {
                      "name": "InvalidHash",
                      "index": 4
                    },
                    {
                      "name": "DuplicateKey",
                      "index": 5
                    },
                    {
                      "name": "ExtraneousNode",
                      "index": 6
                    },
                    {
                      "name": "ExtraneousValue",
                      "index": 7
                    },
                    {
                      "name": "ExtraneousHashReference",
                      "index": 8
                    },
                    {
                      "name": "InvalidChildReference",
                      "index": 9
                    },
                    {
                      "name": "ValueMismatch",
                      "index": 10
                    },
                    {
                      "name": "IncompleteProof",
                      "index": 11
                    },
                    {
                      "name": "RootMismatch",
                      "index": 12
                    },
                    {
                      "name": "DecodeError",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 33,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    },
                    {
                      "name": "TotalIssuanceForced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The `TotalIssuance` was forcefully changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo call just took place."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old",
                          "type": 38,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "The old sudo key (if one was previously set)."
                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The new sudo key (if one was set)."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The sudo key has been updated."
                      ]
                    },
                    {
                      "name": "KeyRemoved",
                      "index": 2,
                      "docs": [
                        "The key was permanently removed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A [sudo_as](Pallet::sudo_as) call just took place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                },
                {
                  "name": "E",
                  "type": 26
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 37
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 26
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_qpow",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProofSubmitted",
                      "fields": [
                        {
                          "name": "nonce",
                          "type": 40,
                          "typeName": "NonceType"
                        },
                        {
                          "name": "difficulty",
                          "type": 41,
                          "typeName": "U512"
                        },
                        {
                          "name": "distance_achieved",
                          "type": 41,
                          "typeName": "U512"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DistanceThresholdAdjusted",
                      "fields": [
                        {
                          "name": "old_distance_threshold",
                          "type": 41,
                          "typeName": "DistanceThreshold"
                        },
                        {
                          "name": "new_distance_threshold",
                          "type": 41,
                          "typeName": "DistanceThreshold"
                        },
                        {
                          "name": "observed_block_time",
                          "type": 12,
                          "typeName": "BlockDuration"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 40,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "primitive_types",
                "U512"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 42,
                      "typeName": "[u64; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 12
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_wormhole",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProofVerified",
                      "fields": [
                        {
                          "name": "exit_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_mining_rewards",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinerRewarded",
                      "fields": [
                        {
                          "name": "miner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "Miner account"
                          ]
                        },
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Total reward (base + fees)"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A miner has been identified for a block"
                      ]
                    },
                    {
                      "name": "FeesCollected",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount collected"
                          ]
                        },
                        {
                          "name": "total",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Total fees waiting for distribution"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transaction fees were collected for later distribution"
                      ]
                    },
                    {
                      "name": "TreasuryRewarded",
                      "fields": [
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Total reward (base + fees)"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Rewards were sent to Treasury when no miner was specified"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "schedule_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A vesting schedule has been created."
                      ]
                    },
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "unvested",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The amount vested has been updated. This could indicate a change in funds available.",
                        "The balance given is the amount which is left unvested (and thus locked)."
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An \\[account\\] has become fully vested."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        },
                        {
                          "name": "result",
                          "type": 36,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "RetrySet",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        },
                        {
                          "name": "period",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set a retry configuration for some task."
                      ]
                    },
                    {
                      "name": "RetryCancelled",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel a retry configuration for some task."
                      ]
                    },
                    {
                      "name": "CallUnavailable",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    },
                    {
                      "name": "PeriodicFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The given task was unable to be renewed since the agenda is full at that block."
                      ]
                    },
                    {
                      "name": "RetryFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The given task was unable to be retried since the agenda is full at that block or there",
                        "was not enough weight to reschedule it."
                      ]
                    },
                    {
                      "name": "PermanentlyOverweight",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "id",
                          "type": 50,
                          "typeName": "Option<TaskName>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The given task can never be executed since it is overweight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "qp_scheduler",
                "BlockNumberOrTimestamp"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Moment",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BlockNumber",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Moment"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "def": {
                "tuple": [
                  48,
                  4
                ]
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 36,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    },
                    {
                      "name": "IfElseMainSuccess",
                      "index": 6,
                      "docs": [
                        "Main call was dispatched."
                      ]
                    },
                    {
                      "name": "IfElseFallbackCalled",
                      "fields": [
                        {
                          "name": "main_error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The fallback call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Submitted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A referendum has been submitted."
                      ]
                    },
                    {
                      "name": "DecisionDepositPlaced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The decision deposit has been placed."
                      ]
                    },
                    {
                      "name": "DecisionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The decision deposit has been refunded."
                      ]
                    },
                    {
                      "name": "DepositSlashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A deposit has been slashed."
                      ]
                    },
                    {
                      "name": "DecisionStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The current tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A referendum has moved into the deciding phase."
                      ]
                    },
                    {
                      "name": "ConfirmStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ConfirmAborted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Confirmed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A referendum has ended its confirmation phase and is ready for approval."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A referendum has been approved and its proposal has been scheduled."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A referendum has been timed out without being decided."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 102,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A referendum has been killed."
                      ]
                    },
                    {
                      "name": "SubmissionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The submission deposit has been refunded."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Metadata for a referendum has been set."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Metadata for a referendum has been cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "preimages",
                "Bounded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 55
                },
                {
                  "name": "H",
                  "type": 100
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Legacy",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H::Output"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Inline",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "BoundedInline"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Lookup",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H::Output"
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "quantus_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 61,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Wormhole",
                      "fields": [
                        {
                          "type": 69,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Wormhole, Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Referenda",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "ReversibleTransfers",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ReversibleTransfers, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "ConvictionVoting",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "TechCollective",
                      "fields": [
                        {
                          "type": 91,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechCollective, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "TechReferenda",
                      "fields": [
                        {
                          "type": 92,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechReferenda, Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "MerkleAirdrop",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MerkleAirdrop, Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "TreasuryPallet",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TreasuryPallet, Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>"
                        }
                      ],
                      "index": 20
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "Can be executed by every `origin`."
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                        "version!"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 57,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 59,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 14,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "authorize_upgrade_without_checks",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                        "example that the spec name remains the same and that the version number increases. Not",
                        "recommended for normal use. Use `authorize_upgrade` instead.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "apply_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                        "the new `code` in the same block or attempt to schedule the upgrade.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "def": {
                "sequence": {
                  "type": 58
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "def": {
                "tuple": [
                  14,
                  14
                ]
              }
            }
          },
          {
            "id": 59,
            "type": {
              "def": {
                "sequence": {
                  "type": 14
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 11,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "[`Config::MinimumPeriod`].",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                        "that changing the complexity of this call could result exhausting the resources in a",
                        "block to execute any other calls.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 65,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 65,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 65,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 66,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibility of churn)."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 65,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_adjust_total_issuance",
                      "fields": [
                        {
                          "name": "direction",
                          "type": 67,
                          "typeName": "AdjustmentDirection"
                        },
                        {
                          "name": "delta",
                          "type": 65,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Adjust the total issuance in a saturating way.",
                        "",
                        "Can only be called by root and always needs a positive `delta`.",
                        "",
                        "# Example"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "value",
                          "type": 65,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Burn the specified liquid free balance from the origin account.",
                        "",
                        "If the origin's account ends up below the existential deposit as a result",
                        "of the burn and `keep_alive` is false, the account will be reaped.",
                        "",
                        "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                        "this `burn` operation will reduce total issuance by the amount _burned_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 37
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "def": {
                "compact": {
                  "type": 37
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AdjustmentDirection"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Increase",
                      "index": 0
                    },
                    {
                      "name": "Decrease",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "remove_key",
                      "index": 4,
                      "docs": [
                        "Permanently removes the sudo key.",
                        "",
                        "**This cannot be un-done.**"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_wormhole",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "verify_wormhole_proof",
                      "fields": [
                        {
                          "name": "proof_bytes",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 71,
                          "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account receiving the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "schedule",
                          "type": 71,
                          "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "NOTE: This will unlock all schedules through the current block.",
                        "",
                        "## Complexity",
                        "- `O(1)`."
                      ]
                    },
                    {
                      "name": "merge_schedules",
                      "fields": [
                        {
                          "name": "schedule1_index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "schedule2_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                        "the highest possible start and end blocks. If both schedules have already started the",
                        "current block will be used as the schedule start; with the caveat that if one schedule",
                        "is finished by the current block, the other will be treated as the new merged schedule,",
                        "unmodified.",
                        "",
                        "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                        "NOTE: This will unlock all schedules through the current block prior to merging.",
                        "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                        "and both will be removed.",
                        "",
                        "Merged schedule attributes:",
                        "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                        "  current_block)`.",
                        "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                        "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `schedule1_index`: index of the first schedule to merge.",
                        "- `schedule2_index`: index of the second schedule to merge."
                      ]
                    },
                    {
                      "name": "force_remove_vesting_schedule",
                      "fields": [
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule_index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Force remove a vesting schedule",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `target`: An account that has a vesting schedule",
                        "- `schedule_index`: The vesting schedule index that should be removed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage.",
                        "",
                        "If `len` is provided, then it will be a much cheaper operation.",
                        "",
                        "- `hash`: The hash of the preimage to be removed from the store.",
                        "- `len`: The length of the preimage of `hash`."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    },
                    {
                      "name": "ensure_updated",
                      "fields": [
                        {
                          "name": "hashes",
                          "type": 73,
                          "typeName": "Vec<T::Hash>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Ensure that the bulk of pre-images is upgraded.",
                        "",
                        "The caller pays no fee if at least 90% of pre-images were successfully updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 75,
                          "typeName": "Option<Period<BlockNumberFor<T>, T::Moment>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 75,
                          "typeName": "Option<Period<BlockNumberFor<T>, T::Moment>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestamp<BlockNumberFor<T>, T::Moment>"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 75,
                          "typeName": "Option<Period<BlockNumberFor<T>, T::Moment>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay."
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        },
                        {
                          "name": "after",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestamp<BlockNumberFor<T>, T::Moment>"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 75,
                          "typeName": "Option<Period<BlockNumberFor<T>, T::Moment>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay."
                      ]
                    },
                    {
                      "name": "set_retry",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "period",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                        "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                        "succeeds.",
                        "",
                        "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                        "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                        "normally while the task is retrying.",
                        "",
                        "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                        "clones of the original task. Their retry configuration will be derived from the",
                        "original task's configuration, but will have a lower value for `remaining` than the",
                        "original `total_retries`."
                      ]
                    },
                    {
                      "name": "set_retry_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        },
                        {
                          "name": "retries",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "period",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                        "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                        "it succeeds.",
                        "",
                        "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                        "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                        "normally while the task is retrying.",
                        "",
                        "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                        "clones of the original task. Their retry configuration will be derived from the",
                        "original task's configuration, but will have a lower value for `remaining` than the",
                        "original `total_retries`."
                      ]
                    },
                    {
                      "name": "cancel_retry",
                      "fields": [
                        {
                          "name": "task",
                          "type": 49,
                          "typeName": "TaskAddressOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Removes the retry configuration of a task."
                      ]
                    },
                    {
                      "name": "cancel_retry_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "TaskName"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Cancel the retry configuration of a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 49
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 49
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 77,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched.",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 53,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 77,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatched without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 78,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 77,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin except `None`.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then the calls are dispatch without checking origin filter. (This",
                        "includes bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "## Complexity",
                        "- O(C) where C is the number of calls to be batched."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatch a function call with a specified weight.",
                        "",
                        "This function does not check the weight of the call, and instead allows the",
                        "Root origin to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    },
                    {
                      "name": "if_else",
                      "fields": [
                        {
                          "name": "main",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "fallback",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Dispatch a fallback call in the event the main call fails to execute.",
                        "May be called from any origin except `None`.",
                        "",
                        "This function first attempts to dispatch the `main` call.",
                        "If the `main` call fails, the `fallback` is attemted.",
                        "if the fallback is successfully dispatched, the weights of both calls",
                        "are accumulated and an event containing the main call error is deposited.",
                        "",
                        "In the event of a fallback failure the whole call fails",
                        "with the weights returned.",
                        "",
                        "- `main`: The main call to be dispatched. This is the primary action to execute.",
                        "- `fallback`: The fallback call to be dispatched in case the `main` call fails.",
                        "",
                        "## Dispatch Logic",
                        "- If the origin is `root`, both the main and fallback calls are executed without",
                        "  applying any origin filters.",
                        "- If the origin is not `root`, the origin filter is applied to both the `main` and",
                        "  `fallback` calls.",
                        "",
                        "## Use Case",
                        "- Some use cases might involve submitting a `batch` type call in either main, fallback",
                        "  or both."
                      ]
                    },
                    {
                      "name": "dispatch_as_fallible",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 78,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "Almost the same as [`Pallet::dispatch_as`] but forwards any error of the inner call.",
                        "",
                        "The dispatch origin for this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "sequence": {
                  "type": 55
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "quantus_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Origins",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "pallet_custom_origins::Origin"
                        }
                      ],
                      "index": 19
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    },
                    {
                      "name": "Authorized",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "quantus_runtime",
                "governance",
                "origins",
                "pallet_custom_origins",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Treasurer",
                      "index": 0
                    },
                    {
                      "name": "SmallSpender",
                      "index": 1
                    },
                    {
                      "name": "MediumSpender",
                      "index": 2
                    },
                    {
                      "name": "BigSpender",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "proposal_origin",
                          "type": 78,
                          "typeName": "Box<PalletsOriginOf<T>>"
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>"
                        },
                        {
                          "name": "enactment_moment",
                          "type": 82,
                          "typeName": "DispatchTime<BlockNumberFor<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a referendum on a privileged action.",
                        "",
                        "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                        "  available.",
                        "- `proposal_origin`: The origin from which the proposal should be executed.",
                        "- `proposal`: The proposal.",
                        "- `enactment_moment`: The moment that the proposal should be enacted.",
                        "",
                        "Emits `Submitted`."
                      ]
                    },
                    {
                      "name": "place_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Post the Decision Deposit for a referendum.",
                        "",
                        "- `origin`: must be `Signed` and the account must have funds available for the",
                        "  referendum's track's Decision Deposit.",
                        "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                        "  posted.",
                        "",
                        "Emits `DecisionDepositPlaced`."
                      ]
                    },
                    {
                      "name": "refund_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Refund the Decision Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `DecisionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel an ongoing referendum.",
                        "",
                        "- `origin`: must be the `CancelOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Cancelled`."
                      ]
                    },
                    {
                      "name": "kill",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel an ongoing referendum and slash the deposits.",
                        "",
                        "- `origin`: must be the `KillOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Killed` and `DepositSlashed`."
                      ]
                    },
                    {
                      "name": "nudge_referendum",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Advance a referendum onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `index`: the referendum to be advanced."
                      ]
                    },
                    {
                      "name": "one_fewer_deciding",
                      "fields": [
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Advance a track onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `track`: the track to be advanced.",
                        "",
                        "Action item for when there is now one fewer referendum in the deciding phase and the",
                        "`DecidingCount` is not yet updated. This means that we should either:",
                        "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                        "- decrement `DecidingCount`."
                      ]
                    },
                    {
                      "name": "refund_submission_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Refund the Submission Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `SubmissionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "maybe_hash",
                          "type": 83,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set or clear metadata of a referendum.",
                        "",
                        "Parameters:",
                        "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                        "  metadata of a finished referendum.",
                        "- `index`:  The index of a referendum to set or clear metadata for.",
                        "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "DispatchTime"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "At",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "After",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_high_security",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        },
                        {
                          "name": "interceptor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "recoverer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Enable high-security for the calling account with a specified delay",
                        "",
                        "- `delay`: The time (in milliseconds) after submission before the transaction executes."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "tx_id",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel a pending reversible transaction scheduled by the caller.",
                        "",
                        "- `tx_id`: The unique identifier of the transaction to cancel."
                      ]
                    },
                    {
                      "name": "execute_transfer",
                      "fields": [
                        {
                          "name": "tx_id",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Called by the Scheduler to finalize the scheduled task/call",
                        "",
                        "- `tx_id`: The unique id of the transaction to finalize and dispatch."
                      ]
                    },
                    {
                      "name": "schedule_transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "<<T as frame_system::Config>::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule a transaction for delayed execution."
                      ]
                    },
                    {
                      "name": "schedule_transfer_with_delay",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 62,
                          "typeName": "<<T as frame_system::Config>::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "delay",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a transaction for delayed execution with a custom, one-time delay.",
                        "",
                        "This can only be used by accounts that have *not* set up a persistent",
                        "reversibility configuration with `set_reversibility`.",
                        "",
                        "- `delay`: The time (in blocks or milliseconds) before the transaction executes."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "poll_index",
                          "type": 86,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 87,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `poll_index`: The index of the poll to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter has voted on."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "class",
                          "type": 53,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "to",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "conviction",
                          "type": 89,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account for a",
                        "particular class of polls.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed through",
                        "    `remove_vote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                        "  to this function are required.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                        "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [
                        {
                          "name": "class",
                          "type": 53,
                          "typeName": "ClassOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Undelegate the voting power of the sending account for a particular class of polls.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued has passed.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "- `class`: The class of polls to remove the delegation from.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                        "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "class",
                          "type": 53,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the lock caused by prior voting/delegating which has expired within a particular",
                        "class.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `class`: The class of polls to unlock.",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "class",
                          "type": 90,
                          "typeName": "Option<ClassOf<T, I>>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If:",
                        "- the poll was cancelled, or",
                        "- the poll is ongoing, or",
                        "- the poll has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the poll has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for poll `index`.",
                        "",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                        "  which have finished or are cancelled, this must be `Some`.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "class",
                          "type": 53,
                          "typeName": "ClassOf<T, I>"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove a vote for a poll.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the poll was cancelled, because the voter lost the poll or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for poll",
                        "  `index`.",
                        "- `index`: The index of poll of the vote to be removed.",
                        "- `class`: The class of the poll.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 88,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "SplitAbstain",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "abstain",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Vote"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "conviction",
                "Conviction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 53
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 53
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Introduce a new member.",
                        "",
                        "- `origin`: Must be the `AddOrigin`.",
                        "- `who`: Account of non-member which will become a member.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "promote_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Increment the rank of an existing member by one.",
                        "",
                        "- `origin`: Must be the `PromoteOrigin`.",
                        "- `who`: Account of existing member.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "demote_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Decrement the rank of an existing member by one. If the member is already at rank zero,",
                        "then they are removed entirely.",
                        "",
                        "- `origin`: Must be the `DemoteOrigin`.",
                        "- `who`: Account of existing member of rank greater than zero.",
                        "",
                        "Weight: `O(1)`, less if the member's index is highest in its rank."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "min_rank",
                          "type": 53,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Remove the member entirely.",
                        "",
                        "- `origin`: Must be the `RemoveOrigin`.",
                        "- `who`: Account of existing member of rank greater than zero.",
                        "- `min_rank`: The rank of the member or greater.",
                        "",
                        "Weight: `O(min_rank)`."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "poll",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "aye",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "- `origin`: Must be `Signed` by a member account.",
                        "- `poll`: Index of a poll which is ongoing.",
                        "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
                        "",
                        "Transaction fees are be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "",
                        "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
                      ]
                    },
                    {
                      "name": "cleanup_poll",
                      "fields": [
                        {
                          "name": "poll_index",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove votes from the given poll. It must have ended.",
                        "",
                        "- `origin`: Must be `Signed` by any account.",
                        "- `poll_index`: Index of a poll which is completed and for which votes continue to",
                        "  exist.",
                        "- `max`: Maximum number of vote items from remove in this call.",
                        "",
                        "Transaction fees are waived if the operation is successful.",
                        "",
                        "Weight `O(max)` (less if there are fewer items to remove than `max`)."
                      ]
                    },
                    {
                      "name": "exchange_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_who",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Exchanges a member with a new account and the same existing rank.",
                        "",
                        "- `origin`: Must be the `ExchangeOrigin`.",
                        "- `who`: Account of existing member of rank greater than zero to be exchanged.",
                        "- `new_who`: New Account of existing member of rank greater than zero to exchanged to."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit",
                      "fields": [
                        {
                          "name": "proposal_origin",
                          "type": 78,
                          "typeName": "Box<PalletsOriginOf<T>>"
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>"
                        },
                        {
                          "name": "enactment_moment",
                          "type": 82,
                          "typeName": "DispatchTime<BlockNumberFor<T, I>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a referendum on a privileged action.",
                        "",
                        "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                        "  available.",
                        "- `proposal_origin`: The origin from which the proposal should be executed.",
                        "- `proposal`: The proposal.",
                        "- `enactment_moment`: The moment that the proposal should be enacted.",
                        "",
                        "Emits `Submitted`."
                      ]
                    },
                    {
                      "name": "place_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Post the Decision Deposit for a referendum.",
                        "",
                        "- `origin`: must be `Signed` and the account must have funds available for the",
                        "  referendum's track's Decision Deposit.",
                        "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                        "  posted.",
                        "",
                        "Emits `DecisionDepositPlaced`."
                      ]
                    },
                    {
                      "name": "refund_decision_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Refund the Decision Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `DecisionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel an ongoing referendum.",
                        "",
                        "- `origin`: must be the `CancelOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Cancelled`."
                      ]
                    },
                    {
                      "name": "kill",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel an ongoing referendum and slash the deposits.",
                        "",
                        "- `origin`: must be the `KillOrigin`.",
                        "- `index`: The index of the referendum to be cancelled.",
                        "",
                        "Emits `Killed` and `DepositSlashed`."
                      ]
                    },
                    {
                      "name": "nudge_referendum",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Advance a referendum onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `index`: the referendum to be advanced."
                      ]
                    },
                    {
                      "name": "one_fewer_deciding",
                      "fields": [
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Advance a track onto its next logical state. Only used internally.",
                        "",
                        "- `origin`: must be `Root`.",
                        "- `track`: the track to be advanced.",
                        "",
                        "Action item for when there is now one fewer referendum in the deciding phase and the",
                        "`DecidingCount` is not yet updated. This means that we should either:",
                        "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                        "- decrement `DecidingCount`."
                      ]
                    },
                    {
                      "name": "refund_submission_deposit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Refund the Submission Deposit for a closed referendum back to the depositor.",
                        "",
                        "- `origin`: must be `Signed` or `Root`.",
                        "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                        "  refunded.",
                        "",
                        "Emits `SubmissionDepositRefunded`."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "maybe_hash",
                          "type": 83,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set or clear metadata of a referendum.",
                        "",
                        "Parameters:",
                        "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                        "  metadata of a finished referendum.",
                        "- `index`:  The index of a referendum to set or clear metadata for.",
                        "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "pallet_merkle_airdrop",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_airdrop",
                      "fields": [
                        {
                          "name": "merkle_root",
                          "type": 1,
                          "typeName": "MerkleRoot"
                        },
                        {
                          "name": "vesting_period",
                          "type": 94,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "vesting_delay",
                          "type": 94,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new airdrop with a Merkle root.",
                        "",
                        "The Merkle root is a cryptographic hash that represents all valid claims",
                        "for this airdrop. Users will later provide Merkle proofs to verify their",
                        "eligibility to claim tokens.",
                        "",
                        "# Parameters",
                        "",
                        "* `origin` - The origin of the call (must be signed)",
                        "* `merkle_root` - The Merkle root hash representing all valid claims",
                        "* `vesting_period` - Optional vesting period for the airdrop",
                        "* `vesting_delay` - Optional delay before vesting starts"
                      ]
                    },
                    {
                      "name": "fund_airdrop",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Fund an existing airdrop with tokens.",
                        "",
                        "This function transfers tokens from the caller to the airdrop's account,",
                        "making them available for users to claim.",
                        "",
                        "# Parameters",
                        "",
                        "* `origin` - The origin of the call (must be signed)",
                        "* `airdrop_id` - The ID of the airdrop to fund",
                        "* `amount` - The amount of tokens to add to the airdrop",
                        "",
                        "# Errors",
                        "",
                        "* `AirdropNotFound` - If the specified airdrop does not exist"
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId"
                        },
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 95,
                          "typeName": "BoundedVec<MerkleHash, T::MaxProofs>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Claim tokens from an airdrop by providing a Merkle proof.",
                        "",
                        "Users can claim their tokens by providing a proof of their eligibility.",
                        "The proof is verified against the airdrop's Merkle root.",
                        "Anyone can trigger a claim for any eligible recipient.",
                        "",
                        "# Parameters",
                        "",
                        "* `origin` - The origin of the call",
                        "* `airdrop_id` - The ID of the airdrop to claim from",
                        "* `amount` - The amount of tokens to claim",
                        "* `merkle_proof` - The Merkle proof verifying eligibility",
                        "",
                        "# Errors",
                        "",
                        "* `AirdropNotFound` - If the specified airdrop does not exist",
                        "* `AlreadyClaimed` - If the recipient has already claimed from this airdrop",
                        "* `InvalidProof` - If the provided Merkle proof is invalid",
                        "* `InsufficientAirdropBalance` - If the airdrop doesn't have enough tokens"
                      ]
                    },
                    {
                      "name": "delete_airdrop",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Delete an airdrop and reclaim any remaining funds.",
                        "",
                        "This function allows the creator of an airdrop to delete it and reclaim",
                        "any remaining tokens that haven't been claimed.",
                        "",
                        "# Parameters",
                        "",
                        "* `origin` - The origin of the call (must be the airdrop creator)",
                        "* `airdrop_id` - The ID of the airdrop to delete",
                        "",
                        "# Errors",
                        "",
                        "* `AirdropNotFound` - If the specified airdrop does not exist",
                        "* `NotAirdropCreator` - If the caller is not the creator of the airdrop"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 96,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "def": {
                "sequence": {
                  "type": 1
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "spend_local",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 65,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
                        "",
                        "### Details",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary.",
                        "",
                        "### Parameters",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "## Events",
                        "",
                        "Emits [`Event::SpendApproved`] if successful."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 86,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be [`Config::RejectOrigin`].",
                        "",
                        "## Details",
                        "",
                        "The original deposit will no longer be returned.",
                        "",
                        "### Parameters",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "### Complexity",
                        "- O(A) where `A` is the number of approvals",
                        "",
                        "### Errors",
                        "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
                        "  approval queue, i.e., the proposal has not been approved. This could also mean the",
                        "  proposal does not exist altogether, thus there is no way it would have been approved",
                        "  in the first place."
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "asset_kind",
                          "type": 37,
                          "typeName": "Box<T::AssetKind>"
                        },
                        {
                          "name": "amount",
                          "type": 65,
                          "typeName": "AssetBalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 62,
                          "typeName": "Box<BeneficiaryLookupOf<T, I>>"
                        },
                        {
                          "name": "valid_from",
                          "type": 94,
                          "typeName": "Option<BlockNumberFor<T, I>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
                        "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
                        "for assertion using the [`Config::BalanceConverter`].",
                        "",
                        "## Details",
                        "",
                        "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
                        "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
                        "the [`Config::PayoutPeriod`].",
                        "",
                        "### Parameters",
                        "- `asset_kind`: An indicator of the specific asset class to be spent.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The beneficiary of the spend.",
                        "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
                        "  the past if the resulting spend has not yet expired according to the",
                        "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
                        "  approval.",
                        "",
                        "## Events",
                        "",
                        "Emits [`Event::AssetSpendApproved`] if successful."
                      ]
                    },
                    {
                      "name": "payout",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim a spend.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be signed",
                        "",
                        "## Details",
                        "",
                        "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
                        "[`Config::PayoutPeriod`] from the `valid_from` block.",
                        "In case of a payout failure, the spend status must be updated with the `check_status`",
                        "dispatchable before retrying with the current function.",
                        "",
                        "### Parameters",
                        "- `index`: The spend index.",
                        "",
                        "## Events",
                        "",
                        "Emits [`Event::Paid`] if successful."
                      ]
                    },
                    {
                      "name": "check_status",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Check the status of the spend and remove it from the storage if processed.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be signed.",
                        "",
                        "## Details",
                        "",
                        "The status check is a prerequisite for retrying a failed payout.",
                        "If a spend has either succeeded or expired, it is removed from the storage by this",
                        "function. In such instances, transaction fees are refunded.",
                        "",
                        "### Parameters",
                        "- `index`: The spend index.",
                        "",
                        "## Events",
                        "",
                        "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
                        "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
                      ]
                    },
                    {
                      "name": "void_spend",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Void previously approved spend.",
                        "",
                        "## Dispatch Origin",
                        "",
                        "Must be [`Config::RejectOrigin`].",
                        "",
                        "## Details",
                        "",
                        "A spend void is only possible if the payout has not been attempted yet.",
                        "",
                        "### Parameters",
                        "- `index`: The spend index.",
                        "",
                        "## Events",
                        "",
                        "Emits [`Event::AssetSpendVoided`] if successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 55,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account."
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "rescuer",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account."
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": 66,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "threshold",
                          "type": 53,
                          "typeName": "u16"
                        },
                        {
                          "name": "delay_period",
                          "type": 4,
                          "typeName": "BlockNumberFromProviderOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered."
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration)."
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "rescuer",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process."
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you."
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account."
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "index": 7,
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration)."
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 62,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of."
                      ]
                    },
                    {
                      "name": "poke_deposit",
                      "fields": [
                        {
                          "name": "maybe_account",
                          "type": 99,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Poke deposits for recovery configurations and / or active recoveries.",
                        "",
                        "This can be used by accounts to possibly lower their locked amount.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `maybe_account`: Optional recoverable account for which you have an active recovery",
                        "and want to adjust the deposit for the active recovery.",
                        "",
                        "This function checks both recovery configuration deposit and active recovery deposits",
                        "of the caller:",
                        "- If the caller has created a recovery configuration, checks and adjusts its deposit",
                        "- If the caller has initiated any active recoveries, and provides the account in",
                        "`maybe_account`, checks and adjusts those deposits",
                        "",
                        "If any deposit is updated, the difference will be reserved/unreserved from the caller's",
                        "account.",
                        "",
                        "The transaction is made free if any deposit is updated and paid otherwise.",
                        "",
                        "Emits `DepositPoked` if any deposit is updated.",
                        "Multiple events may be emitted in case both types of deposits are updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 62
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 62
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "poseidon_resonance",
                "PoseidonHasher"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Votes",
                  "type": 6
                },
                {
                  "name": "Total",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Votes"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Votes"
                    },
                    {
                      "name": "support",
                      "type": 6,
                      "typeName": "Votes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HighSecuritySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "interceptor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "recoverer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delay",
                          "type": 48,
                          "typeName": "BlockNumberOrTimestampOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A user has enabled their high-security settings.",
                        "[who, interceptor, recoverer, delay]"
                      ]
                    },
                    {
                      "name": "TransactionScheduled",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "interceptor",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "tx_id",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "execute_at",
                          "type": 104,
                          "typeName": "DispatchTime<BlockNumberFor<T>, T::Moment>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A transaction has been intercepted and scheduled for delayed execution.",
                        "[from, to, interceptor, amount, tx_id, execute_at_moment]"
                      ]
                    },
                    {
                      "name": "TransactionCancelled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "tx_id",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A scheduled transaction has been successfully cancelled by the owner.",
                        "[who, tx_id]"
                      ]
                    },
                    {
                      "name": "TransactionExecuted",
                      "fields": [
                        {
                          "name": "tx_id",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 105,
                          "typeName": "DispatchResultWithPostInfo"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A scheduled transaction was executed by the scheduler.",
                        "[tx_id, dispatch_result]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "qp_scheduler",
                "DispatchTime"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Moment",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "At",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "After",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "BlockNumberOrTimestamp<BlockNumber, Moment>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 106
                },
                {
                  "name": "E",
                  "type": 108
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 106
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 108
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PostDispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "actual_weight",
                      "type": 107,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchErrorWithPostInfo"
              ],
              "params": [
                {
                  "name": "Info",
                  "type": 106
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "post_info",
                      "type": 106,
                      "typeName": "Info"
                    },
                    {
                      "name": "error",
                      "type": 26,
                      "typeName": "DispatchError"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account has delegated their vote to another account. \\[who, target\\]"
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vote",
                          "type": 87,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An account has voted"
                      ]
                    },
                    {
                      "name": "VoteRemoved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vote",
                          "type": 87,
                          "typeName": "AccountVote<BalanceOf<T, I>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A vote has been removed"
                      ]
                    },
                    {
                      "name": "VoteUnlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "class",
                          "type": 53,
                          "typeName": "ClassOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The lockup period of a conviction vote expired, and the funds have been unlocked."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A member `who` has been added."
                      ]
                    },
                    {
                      "name": "RankChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rank",
                          "type": 53,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The member `who`se rank has been changed to the given `rank`."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rank",
                          "type": 53,
                          "typeName": "Rank"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The member `who` of given `rank` has been removed from the collective."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "poll",
                          "type": 4,
                          "typeName": "PollIndexOf<T, I>"
                        },
                        {
                          "name": "vote",
                          "type": 111,
                          "typeName": "VoteRecord"
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "TallyOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
                        "`tally`."
                      ]
                    },
                    {
                      "name": "MemberExchanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new_who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The member `who` had their `AccountId` changed to `new_who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "VoteRecord"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Aye",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Votes"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Nay",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Votes"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "Tally"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                },
                {
                  "name": "M",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bare_ayes",
                      "type": 4,
                      "typeName": "MemberIndex"
                    },
                    {
                      "name": "ayes",
                      "type": 4,
                      "typeName": "Votes"
                    },
                    {
                      "name": "nays",
                      "type": 4,
                      "typeName": "Votes"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Submitted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A referendum has been submitted."
                      ]
                    },
                    {
                      "name": "DecisionDepositPlaced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The decision deposit has been placed."
                      ]
                    },
                    {
                      "name": "DecisionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The decision deposit has been refunded."
                      ]
                    },
                    {
                      "name": "DepositSlashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A deposit has been slashed."
                      ]
                    },
                    {
                      "name": "DecisionStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "track",
                          "type": 53,
                          "typeName": "TrackIdOf<T, I>",
                          "docs": [
                            "The track (and by extension proposal dispatch origin) of this referendum."
                          ]
                        },
                        {
                          "name": "proposal",
                          "type": 54,
                          "typeName": "BoundedCallOf<T, I>",
                          "docs": [
                            "The proposal for the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The current tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A referendum has moved into the deciding phase."
                      ]
                    },
                    {
                      "name": "ConfirmStarted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ConfirmAborted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Confirmed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A referendum has ended its confirmation phase and is ready for approval."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A referendum has been approved and its proposal has been scheduled."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A referendum has been timed out without being decided."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "tally",
                          "type": 112,
                          "typeName": "T::Tally",
                          "docs": [
                            "The final tally of votes in this referendum."
                          ]
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A referendum has been killed."
                      ]
                    },
                    {
                      "name": "SubmissionDepositRefunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account who placed the deposit."
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": [
                            "The amount placed by the account."
                          ]
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The submission deposit has been refunded."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Metadata for a referendum has been set."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex",
                          "docs": [
                            "Index of the referendum."
                          ]
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash",
                          "docs": [
                            "Preimage hash."
                          ]
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Metadata for a referendum has been cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "pallet_merkle_airdrop",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AirdropCreated",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId",
                          "docs": [
                            "The ID of the created airdrop"
                          ]
                        },
                        {
                          "name": "airdrop_metadata",
                          "type": 115,
                          "typeName": "AirdropMetadataFor<T>",
                          "docs": [
                            "Airdrop metadata"
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new airdrop has been created.",
                        "",
                        "Parameters: [airdrop_id, merkle_root]"
                      ]
                    },
                    {
                      "name": "AirdropFunded",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId",
                          "docs": [
                            "The ID of the funded airdrop"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount of tokens added to the airdrop"
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An airdrop has been funded with tokens.",
                        "",
                        "Parameters: [airdrop_id, amount]"
                      ]
                    },
                    {
                      "name": "Claimed",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId",
                          "docs": [
                            "The ID of the airdrop claimed from"
                          ]
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The account that claimed the tokens"
                          ]
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "The amount of tokens claimed"
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A user has claimed tokens from an airdrop.",
                        "",
                        "Parameters: [airdrop_id, account, amount]"
                      ]
                    },
                    {
                      "name": "AirdropDeleted",
                      "fields": [
                        {
                          "name": "airdrop_id",
                          "type": 4,
                          "typeName": "AirdropId",
                          "docs": [
                            "The ID of the deleted airdrop"
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An airdrop has been deleted.",
                        "",
                        "Parameters: [airdrop_id]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "pallet_merkle_airdrop",
                "AirdropMetadata"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "merkle_root",
                      "type": 1,
                      "typeName": "MerkleHash"
                    },
                    {
                      "name": "creator",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "vesting_period",
                      "type": 94,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "vesting_delay",
                      "type": 94,
                      "typeName": "Option<BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    },
                    {
                      "name": "UpdatedInactive",
                      "fields": [
                        {
                          "name": "reactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "deactivated",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The inactive funds of the pallet have been updated."
                      ]
                    },
                    {
                      "name": "AssetSpendApproved",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        },
                        {
                          "name": "asset_kind",
                          "type": 37,
                          "typeName": "T::AssetKind"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "AssetBalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::Beneficiary"
                        },
                        {
                          "name": "valid_from",
                          "type": 4,
                          "typeName": "BlockNumberFor<T, I>"
                        },
                        {
                          "name": "expire_at",
                          "type": 4,
                          "typeName": "BlockNumberFor<T, I>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new asset spend proposal has been approved."
                      ]
                    },
                    {
                      "name": "AssetSpendVoided",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An approved spend was voided."
                      ]
                    },
                    {
                      "name": "Paid",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        },
                        {
                          "name": "payment_id",
                          "type": 4,
                          "typeName": "<T::Paymaster as Pay>::Id"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A payment happened."
                      ]
                    },
                    {
                      "name": "PaymentFailed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        },
                        {
                          "name": "payment_id",
                          "type": 4,
                          "typeName": "<T::Paymaster as Pay>::Id"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A payment failed and can be retried."
                      ]
                    },
                    {
                      "name": "SpendProcessed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "SpendIndex"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A spend was processed and removed from the storage. It might have been successfully",
                        "paid or it may have expired."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A recovery process has been set up for an account."
                      ]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A recovery process has been initiated for lost account by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been vouched for by sender."
                      ]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been closed."
                      ]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Lost account has been successfully recovered by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A recovery process has been removed for an account."
                      ]
                    },
                    {
                      "name": "DepositPoked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "kind",
                          "type": 118,
                          "typeName": "DepositKind<T>"
                        },
                        {
                          "name": "old_deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "new_deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A deposit has been updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "pallet_recovery",
                "DepositKind"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 119
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryConfig",
                      "index": 0
                    },
                    {
                      "name": "ActiveRecoveryFor",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "quantus_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "def": {
                "sequence": {
                  "type": 122
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 86,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 124,
                      "typeName": "Cow<'static, str>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 125
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 125
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 13,
                      "typeName": "T::Hash"
                    },
                    {
                      "name": "check_version",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 128,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 129
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 129,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 129,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 129,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 107,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 107,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 107,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 131,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 12,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 124,
                      "typeName": "Cow<'static, str>"
                    },
                    {
                      "name": "impl_name",
                      "type": 124,
                      "typeName": "Cow<'static, str>"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 134,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "system_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 135
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 135
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "def": {
                "sequence": {
                  "type": 136
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "def": {
                "tuple": [
                  137,
                  4
                ]
              }
            }
          },
          {
            "id": 137,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    },
                    {
                      "name": "MultiBlockMigrationsOngoing",
                      "index": 6,
                      "docs": [
                        "A multi-block migration is ongoing and prevents the current code from being replaced."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 7,
                      "docs": [
                        "No upgrade authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 8,
                      "docs": [
                        "The submitted code is not authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 140
                },
                {
                  "name": "Extrinsic",
                  "type": 141
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 140,
                      "typeName": "Header"
                    },
                    {
                      "name": "extrinsics",
                      "type": 158,
                      "typeName": "Vec<Extrinsic>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 86,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 13,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 15,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 62
                },
                {
                  "name": "Call",
                  "type": 55
                },
                {
                  "name": "Signature",
                  "type": 142
                },
                {
                  "name": "Extra",
                  "type": 145
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "dilithium_crypto",
                "types",
                "DilithiumSignatureScheme"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Dilithium",
                      "fields": [
                        {
                          "type": 143,
                          "typeName": "DilithiumSignatureWithPublic"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "dilithium_crypto",
                "types",
                "DilithiumSignatureWithPublic"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bytes",
                      "type": 144,
                      "typeName": "[u8; DilithiumSignatureWithPublic::TOTAL_LEN]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "def": {
                "array": {
                  "len": 7219,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "def": {
                "tuple": [
                  146,
                  147,
                  148,
                  149,
                  150,
                  152,
                  153,
                  154,
                  155,
                  157
                ]
              }
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 151,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 86,
                      "typeName": "T::Nonce"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 65,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "CheckMetadataHash"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mode",
                      "type": 156,
                      "typeName": "Mode"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "Mode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Disabled",
                      "index": 0
                    },
                    {
                      "name": "Enabled",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "quantus_runtime",
                "transaction_extensions",
                "ReversibleTransactionExtension"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 158,
            "type": {
              "def": {
                "sequence": {
                  "type": 141
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 160
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 137,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 161,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "def": {
                "sequence": {
                  "type": 160
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 164
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 165,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 137
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 137,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "def": {
                "sequence": {
                  "type": 164
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 167
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 171,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 168
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 168,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "quantus_runtime",
                "RuntimeHoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "pallet_preimage::HoldReason"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ReversibleTransfers",
                      "fields": [
                        {
                          "type": 170,
                          "typeName": "pallet_reversible_transfers::HoldReason"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Preimage",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ScheduledTransfer",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "def": {
                "sequence": {
                  "type": 167
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 173
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 175,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 174
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 174,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "quantus_runtime",
                "RuntimeFreezeReason"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 175,
            "type": {
              "def": {
                "sequence": {
                  "type": 173
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "def": {
                "tuple": [
                  12,
                  0,
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    },
                    {
                      "name": "IssuanceDeactivated",
                      "index": 10,
                      "docs": [
                        "The issuance cannot be modified since it is already deactivated."
                      ]
                    },
                    {
                      "name": "DeltaZero",
                      "index": 11,
                      "docs": [
                        "The delta cannot be zero."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet."
              ]
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "pallet_qpow",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSolution",
                      "index": 0
                    },
                    {
                      "name": "ArithmeticOverflow",
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "pallet_wormhole",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0
                    },
                    {
                      "name": "ProofDeserializationFailed",
                      "index": 1
                    },
                    {
                      "name": "VerificationFailed",
                      "index": 2
                    },
                    {
                      "name": "InvalidPublicInputs",
                      "index": 3
                    },
                    {
                      "name": "NullifierAlreadyUsed",
                      "index": 4
                    },
                    {
                      "name": "VerifierNotAvailable",
                      "index": 5
                    },
                    {
                      "name": "InvalidStorageRoot",
                      "index": 6
                    },
                    {
                      "name": "StorageRootMismatch",
                      "index": 7
                    },
                    {
                      "name": "BlockNotFound",
                      "index": 8
                    },
                    {
                      "name": "InvalidBlockNumber",
                      "index": 9
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 137,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 185,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "sequence": {
                  "type": 71
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "pallet_vesting",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "pallet_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "AtMaxVestingSchedules",
                      "index": 1,
                      "docs": [
                        "The account already has `MaxVestingSchedules` count of schedules and thus",
                        "cannot add another one. Consider merging existing schedules in order to add another."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "ScheduleIndexOutOfBounds",
                      "index": 3,
                      "docs": [
                        "An index was out of bounds of the vesting schedules."
                      ]
                    },
                    {
                      "name": "InvalidScheduleParams",
                      "index": 4,
                      "docs": [
                        "Failed to create a new schedule because some parameter was invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "pallet_preimage",
                "OldRequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 189,
                          "typeName": "(AccountId, Balance)"
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 190,
                          "typeName": "Option<(AccountId, Balance)>"
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "len",
                          "type": 94,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 189
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 189
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Ticket",
                  "type": 192
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "name": "ticket",
                          "type": 193,
                          "typeName": "(AccountId, Ticket)"
                        },
                        {
                          "name": "len",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "maybe_ticket",
                          "type": 194,
                          "typeName": "Option<(AccountId, Ticket)>"
                        },
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "maybe_len",
                          "type": 94,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "quantus_runtime",
                "governance",
                "definitions",
                "PreimageDeposit"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "def": {
                "tuple": [
                  0,
                  192
                ]
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 193
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 193
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "def": {
                "tuple": [
                  13,
                  4
                ]
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooBig",
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    },
                    {
                      "name": "TooMany",
                      "index": 6,
                      "docs": [
                        "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                      ]
                    },
                    {
                      "name": "TooFew",
                      "index": 7,
                      "docs": [
                        "Too few hashes were requested to be upgraded (i.e. zero)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 199
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 201,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 200
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 200
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "pallet_scheduler",
                "Scheduled"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 1
                },
                {
                  "name": "Call",
                  "type": 54
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 78
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Moment",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 50,
                      "typeName": "Option<Name>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 54,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 75,
                      "typeName": "Option<Period<BlockNumber, Moment>>"
                    },
                    {
                      "name": "origin",
                      "type": 78,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "def": {
                "sequence": {
                  "type": 199
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "pallet_scheduler",
                "RetryConfig"
              ],
              "params": [
                {
                  "name": "Period",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_retries",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "remaining",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "period",
                      "type": 48,
                      "typeName": "Period"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "TargetTimestampInPast",
                      "index": 3,
                      "docs": [
                        "Given target timestamp is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 4,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    },
                    {
                      "name": "Named",
                      "index": 5,
                      "docs": [
                        "Attempt to use a non-named function on a named task."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 53
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 78
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 54
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 102
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 49
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 206,
                          "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 53
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 78
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 54
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 102
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 49
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "track",
                      "type": 53,
                      "typeName": "TrackId"
                    },
                    {
                      "name": "origin",
                      "type": 78,
                      "typeName": "RuntimeOrigin"
                    },
                    {
                      "name": "proposal",
                      "type": 54,
                      "typeName": "Call"
                    },
                    {
                      "name": "enactment",
                      "type": 82,
                      "typeName": "DispatchTime<Moment>"
                    },
                    {
                      "name": "submitted",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "submission_deposit",
                      "type": 207,
                      "typeName": "Deposit<AccountId, Balance>"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 208,
                      "typeName": "Option<Deposit<AccountId, Balance>>"
                    },
                    {
                      "name": "deciding",
                      "type": 209,
                      "typeName": "Option<DecidingStatus<Moment>>"
                    },
                    {
                      "name": "tally",
                      "type": 102,
                      "typeName": "Tally"
                    },
                    {
                      "name": "in_queue",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "alarm",
                      "type": 211,
                      "typeName": "Option<(Moment, ScheduleAddress)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "Deposit"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 207
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 207
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 210
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 210
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "DecidingStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "since",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "confirming",
                      "type": 94,
                      "typeName": "Option<BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 212
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 212
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "def": {
                "tuple": [
                  4,
                  49
                ]
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 214
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 215,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "def": {
                "tuple": [
                  4,
                  6
                ]
              }
            }
          },
          {
            "id": 215,
            "type": {
              "def": {
                "sequence": {
                  "type": 214
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "sequence": {
                  "type": 217
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "def": {
                "tuple": [
                  53,
                  218
                ]
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "TrackDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Name",
                  "type": 125
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 125,
                      "typeName": "Name"
                    },
                    {
                      "name": "max_deciding",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "prepare_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "decision_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "confirm_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "min_enactment_period",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "min_approval",
                      "type": 219,
                      "typeName": "Curve"
                    },
                    {
                      "name": "min_support",
                      "type": 219,
                      "typeName": "Curve"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "Curve"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LinearDecreasing",
                      "fields": [
                        {
                          "name": "length",
                          "type": 220,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "floor",
                          "type": 220,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "ceil",
                          "type": 220,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "SteppedDecreasing",
                      "fields": [
                        {
                          "name": "begin",
                          "type": 220,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "end",
                          "type": 220,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "step",
                          "type": 220,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "period",
                          "type": 220,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reciprocal",
                      "fields": [
                        {
                          "name": "factor",
                          "type": 221,
                          "typeName": "FixedI64"
                        },
                        {
                          "name": "x_offset",
                          "type": 221,
                          "typeName": "FixedI64"
                        },
                        {
                          "name": "y_offset",
                          "type": 221,
                          "typeName": "FixedI64"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedI64"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 222,
                      "typeName": "i64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "def": {
                "primitive": "i64"
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Referendum is not ongoing."
                      ]
                    },
                    {
                      "name": "HasDeposit",
                      "index": 1,
                      "docs": [
                        "Referendum's decision deposit is already paid."
                      ]
                    },
                    {
                      "name": "BadTrack",
                      "index": 2,
                      "docs": [
                        "The track identifier given was invalid."
                      ]
                    },
                    {
                      "name": "Full",
                      "index": 3,
                      "docs": [
                        "There are already a full complement of referenda in progress for this track."
                      ]
                    },
                    {
                      "name": "QueueEmpty",
                      "index": 4,
                      "docs": [
                        "The queue of the track is empty."
                      ]
                    },
                    {
                      "name": "BadReferendum",
                      "index": 5,
                      "docs": [
                        "The referendum index provided is invalid in this context."
                      ]
                    },
                    {
                      "name": "NothingToDo",
                      "index": 6,
                      "docs": [
                        "There was nothing to do in the advancement."
                      ]
                    },
                    {
                      "name": "NoTrack",
                      "index": 7,
                      "docs": [
                        "No track exists for the proposal origin."
                      ]
                    },
                    {
                      "name": "Unfinished",
                      "index": 8,
                      "docs": [
                        "Any deposit cannot be refunded until after the decision is over."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 9,
                      "docs": [
                        "The deposit refunder is not the depositor."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 10,
                      "docs": [
                        "The deposit cannot be refunded since none was made."
                      ]
                    },
                    {
                      "name": "BadStatus",
                      "index": 11,
                      "docs": [
                        "The referendum status is invalid for this operation."
                      ]
                    },
                    {
                      "name": "PreimageNotExist",
                      "index": 12,
                      "docs": [
                        "The preimage does not exist."
                      ]
                    },
                    {
                      "name": "PreimageStoredWithDifferentLength",
                      "index": 13,
                      "docs": [
                        "The preimage is stored with a different length than the one provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "HighSecurityAccountData"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Delay",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "interceptor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "recoverer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "delay",
                      "type": 48,
                      "typeName": "Delay"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "PendingTransfer"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Call",
                  "type": 54
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "from",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "interceptor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call",
                      "type": 54,
                      "typeName": "Call"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 73,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 66,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "pallet_reversible_transfers",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccountAlreadyHighSecurity",
                      "index": 0,
                      "docs": [
                        "The account attempting to enable reversibility is already marked as reversible."
                      ]
                    },
                    {
                      "name": "AccountNotHighSecurity",
                      "index": 1,
                      "docs": [
                        "The account attempting the action is not marked as high security."
                      ]
                    },
                    {
                      "name": "InterceptorCannotBeSelf",
                      "index": 2,
                      "docs": [
                        "Interceptor can not be the account itself, because it is redundant."
                      ]
                    },
                    {
                      "name": "RecovererCannotBeSelf",
                      "index": 3,
                      "docs": [
                        "Recoverer cannot be the account itself, because it is redundant."
                      ]
                    },
                    {
                      "name": "PendingTxNotFound",
                      "index": 4,
                      "docs": [
                        "The specified pending transaction ID was not found."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 5,
                      "docs": [
                        "The caller is not the original submitter of the transaction they are trying to cancel."
                      ]
                    },
                    {
                      "name": "TooManyPendingTransactions",
                      "index": 6,
                      "docs": [
                        "The account has reached the maximum number of pending reversible transactions."
                      ]
                    },
                    {
                      "name": "DelayTooShort",
                      "index": 7,
                      "docs": [
                        "The specified delay period is below the configured minimum."
                      ]
                    },
                    {
                      "name": "SchedulingFailed",
                      "index": 8,
                      "docs": [
                        "Failed to schedule the transaction execution with the scheduler pallet."
                      ]
                    },
                    {
                      "name": "CancellationFailed",
                      "index": 9,
                      "docs": [
                        "Failed to cancel the scheduled task with the scheduler pallet."
                      ]
                    },
                    {
                      "name": "CallDecodingFailed",
                      "index": 10,
                      "docs": [
                        "Failed to decode the OpaqueCall back into a RuntimeCall."
                      ]
                    },
                    {
                      "name": "InvalidCall",
                      "index": 11,
                      "docs": [
                        "Call is invalid."
                      ]
                    },
                    {
                      "name": "InvalidSchedulerOrigin",
                      "index": 12,
                      "docs": [
                        "Invalid scheduler origin"
                      ]
                    },
                    {
                      "name": "InvalidReverser",
                      "index": 13,
                      "docs": [
                        "Reverser is invalid"
                      ]
                    },
                    {
                      "name": "AccountAlreadyReversibleCannotScheduleOneTime",
                      "index": 14,
                      "docs": [
                        "Cannot schedule one time reversible transaction when account is reversible (theft",
                        "deterrence)"
                      ]
                    },
                    {
                      "name": "TooManyInterceptorAccounts",
                      "index": 15,
                      "docs": [
                        "The interceptor has reached the maximum number of accounts they can intercept for."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 229,
            "type": {
              "def": {
                "tuple": [
                  0,
                  53
                ]
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PollIndex",
                  "type": 4
                },
                {
                  "name": "MaxVotes",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Casting",
                      "fields": [
                        {
                          "type": 231,
                          "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "type": 237,
                          "typeName": "Delegating<Balance, AccountId, BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Casting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PollIndex",
                  "type": 4
                },
                {
                  "name": "MaxVotes",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 232,
                      "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>"
                    },
                    {
                      "name": "delegations",
                      "type": 235,
                      "typeName": "Delegations<Balance>"
                    },
                    {
                      "name": "prior",
                      "type": 236,
                      "typeName": "PriorLock<BlockNumber, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 233
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 234,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "def": {
                "tuple": [
                  4,
                  87
                ]
              }
            }
          },
          {
            "id": 234,
            "type": {
              "def": {
                "sequence": {
                  "type": 233
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "vote",
                "Delegating"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "conviction",
                      "type": 89,
                      "typeName": "Conviction"
                    },
                    {
                      "name": "delegations",
                      "type": 235,
                      "typeName": "Delegations<Balance>"
                    },
                    {
                      "name": "prior",
                      "type": 236,
                      "typeName": "PriorLock<BlockNumber, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 239
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 240,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "def": {
                "tuple": [
                  53,
                  6
                ]
              }
            }
          },
          {
            "id": 240,
            "type": {
              "def": {
                "sequence": {
                  "type": 239
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_conviction_voting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Poll is not ongoing."
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 1,
                      "docs": [
                        "The given account did not vote on the poll."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 2,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "NoPermissionYet",
                      "index": 3,
                      "docs": [
                        "The actor has no permission to conduct the action right now but will do in the future."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 4,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "AlreadyVoting",
                      "index": 5,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed through `remove_vote`."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 6,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 7,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 8,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 9,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "ClassNeeded",
                      "index": 10,
                      "docs": [
                        "The class must be supplied since it is not easily determinable from the state."
                      ]
                    },
                    {
                      "name": "BadClass",
                      "index": 11,
                      "docs": [
                        "The class ID supplied is invalid."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "MemberRecord"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "rank",
                      "type": 53,
                      "typeName": "Rank"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "def": {
                "tuple": [
                  53,
                  0
                ]
              }
            }
          },
          {
            "id": 244,
            "type": {
              "def": {
                "tuple": [
                  53,
                  4
                ]
              }
            }
          },
          {
            "id": 245,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "pallet_ranked_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Account is already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Account is not a member."
                      ]
                    },
                    {
                      "name": "NotPolling",
                      "index": 2,
                      "docs": [
                        "The given poll index is unknown or has closed."
                      ]
                    },
                    {
                      "name": "Ongoing",
                      "index": 3,
                      "docs": [
                        "The given poll is still ongoing."
                      ]
                    },
                    {
                      "name": "NoneRemaining",
                      "index": 4,
                      "docs": [
                        "There are no further records to be removed."
                      ]
                    },
                    {
                      "name": "Corruption",
                      "index": 5,
                      "docs": [
                        "Unexpected error in state."
                      ]
                    },
                    {
                      "name": "RankTooLow",
                      "index": 6,
                      "docs": [
                        "The member's rank is too low to vote."
                      ]
                    },
                    {
                      "name": "InvalidWitness",
                      "index": 7,
                      "docs": [
                        "The information provided is incorrect."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 8,
                      "docs": [
                        "The origin is not sufficiently privileged to do the operation."
                      ]
                    },
                    {
                      "name": "SameMember",
                      "index": 9,
                      "docs": [
                        "The new member to exchange is the same as the old member"
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "index": 10,
                      "docs": [
                        "The max member count for the rank has been reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 53
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 78
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 54
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 112
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 49
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 249,
                          "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TimedOut",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        },
                        {
                          "type": 208,
                          "typeName": "Option<Deposit<AccountId, Balance>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Killed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "Moment"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_referenda",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "TrackId",
                  "type": 53
                },
                {
                  "name": "RuntimeOrigin",
                  "type": 78
                },
                {
                  "name": "Moment",
                  "type": 4
                },
                {
                  "name": "Call",
                  "type": 54
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Tally",
                  "type": 112
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ScheduleAddress",
                  "type": 49
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "track",
                      "type": 53,
                      "typeName": "TrackId"
                    },
                    {
                      "name": "origin",
                      "type": 78,
                      "typeName": "RuntimeOrigin"
                    },
                    {
                      "name": "proposal",
                      "type": 54,
                      "typeName": "Call"
                    },
                    {
                      "name": "enactment",
                      "type": 82,
                      "typeName": "DispatchTime<Moment>"
                    },
                    {
                      "name": "submitted",
                      "type": 4,
                      "typeName": "Moment"
                    },
                    {
                      "name": "submission_deposit",
                      "type": 207,
                      "typeName": "Deposit<AccountId, Balance>"
                    },
                    {
                      "name": "decision_deposit",
                      "type": 208,
                      "typeName": "Option<Deposit<AccountId, Balance>>"
                    },
                    {
                      "name": "deciding",
                      "type": 209,
                      "typeName": "Option<DecidingStatus<Moment>>"
                    },
                    {
                      "name": "tally",
                      "type": 112,
                      "typeName": "Tally"
                    },
                    {
                      "name": "in_queue",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "alarm",
                      "type": 211,
                      "typeName": "Option<(Moment, ScheduleAddress)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 122
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 121,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_referenda",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotOngoing",
                      "index": 0,
                      "docs": [
                        "Referendum is not ongoing."
                      ]
                    },
                    {
                      "name": "HasDeposit",
                      "index": 1,
                      "docs": [
                        "Referendum's decision deposit is already paid."
                      ]
                    },
                    {
                      "name": "BadTrack",
                      "index": 2,
                      "docs": [
                        "The track identifier given was invalid."
                      ]
                    },
                    {
                      "name": "Full",
                      "index": 3,
                      "docs": [
                        "There are already a full complement of referenda in progress for this track."
                      ]
                    },
                    {
                      "name": "QueueEmpty",
                      "index": 4,
                      "docs": [
                        "The queue of the track is empty."
                      ]
                    },
                    {
                      "name": "BadReferendum",
                      "index": 5,
                      "docs": [
                        "The referendum index provided is invalid in this context."
                      ]
                    },
                    {
                      "name": "NothingToDo",
                      "index": 6,
                      "docs": [
                        "There was nothing to do in the advancement."
                      ]
                    },
                    {
                      "name": "NoTrack",
                      "index": 7,
                      "docs": [
                        "No track exists for the proposal origin."
                      ]
                    },
                    {
                      "name": "Unfinished",
                      "index": 8,
                      "docs": [
                        "Any deposit cannot be refunded until after the decision is over."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 9,
                      "docs": [
                        "The deposit refunder is not the depositor."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "index": 10,
                      "docs": [
                        "The deposit cannot be refunded since none was made."
                      ]
                    },
                    {
                      "name": "BadStatus",
                      "index": 11,
                      "docs": [
                        "The referendum status is invalid for this operation."
                      ]
                    },
                    {
                      "name": "PreimageNotExist",
                      "index": 12,
                      "docs": [
                        "The preimage does not exist."
                      ]
                    },
                    {
                      "name": "PreimageStoredWithDifferentLength",
                      "index": 13,
                      "docs": [
                        "The preimage is stored with a different length than the one provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_merkle_airdrop",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AirdropNotFound",
                      "index": 0,
                      "docs": [
                        "The specified airdrop does not exist."
                      ]
                    },
                    {
                      "name": "InsufficientAirdropBalance",
                      "index": 1,
                      "docs": [
                        "The airdrop does not have sufficient balance for this operation."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 2,
                      "docs": [
                        "The user has already claimed from this airdrop."
                      ]
                    },
                    {
                      "name": "InvalidProof",
                      "index": 3,
                      "docs": [
                        "The provided Merkle proof is invalid."
                      ]
                    },
                    {
                      "name": "NotAirdropCreator",
                      "index": 4,
                      "docs": [
                        "Only the creator of an airdrop can delete it."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 255,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "pallet_treasury",
                "SpendStatus"
              ],
              "params": [
                {
                  "name": "AssetKind",
                  "type": 37
                },
                {
                  "name": "AssetBalance",
                  "type": 6
                },
                {
                  "name": "Beneficiary",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PaymentId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "asset_kind",
                      "type": 37,
                      "typeName": "AssetKind"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "AssetBalance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "Beneficiary"
                    },
                    {
                      "name": "valid_from",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "expire_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "status",
                      "type": 257,
                      "typeName": "PaymentState<PaymentId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "pallet_treasury",
                "PaymentState"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "Id"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Failed",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidIndex",
                      "index": 0,
                      "docs": [
                        "No proposal, bounty or spend at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 1,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "index": 2,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "index": 3,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    },
                    {
                      "name": "FailedToConvertBalance",
                      "index": 4,
                      "docs": [
                        "The balance of the asset kind is not convertible to the balance of the native asset."
                      ]
                    },
                    {
                      "name": "SpendExpired",
                      "index": 5,
                      "docs": [
                        "The spend has expired and cannot be claimed."
                      ]
                    },
                    {
                      "name": "EarlyPayout",
                      "index": 6,
                      "docs": [
                        "The spend is not yet eligible for payout."
                      ]
                    },
                    {
                      "name": "AlreadyAttempted",
                      "index": 7,
                      "docs": [
                        "The payment has already been attempted."
                      ]
                    },
                    {
                      "name": "PayoutError",
                      "index": 8,
                      "docs": [
                        "There was some issue with the mechanism of payment."
                      ]
                    },
                    {
                      "name": "NotAttempted",
                      "index": 9,
                      "docs": [
                        "The payout was not yet attempted/claimed."
                      ]
                    },
                    {
                      "name": "Inconclusive",
                      "index": 10,
                      "docs": [
                        "The payment has neither failed nor succeeded yet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "pallet_recovery",
                "RecoveryConfig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 261
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "friends",
                      "type": 261,
                      "typeName": "Friends"
                    },
                    {
                      "name": "threshold",
                      "type": 53,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 66,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "def": {
                "tuple": [
                  0,
                  0
                ]
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "pallet_recovery",
                "ActiveRecovery"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 261
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "friends",
                      "type": 261,
                      "typeName": "Friends"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "index": 0,
                      "docs": [
                        "User is not allowed to make a call on behalf of this account"
                      ]
                    },
                    {
                      "name": "ZeroThreshold",
                      "index": 1,
                      "docs": [
                        "Threshold must be greater than zero"
                      ]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "index": 2,
                      "docs": [
                        "Friends list must be greater than zero and threshold"
                      ]
                    },
                    {
                      "name": "MaxFriends",
                      "index": 3,
                      "docs": [
                        "Friends list must be less than max friends"
                      ]
                    },
                    {
                      "name": "NotSorted",
                      "index": 4,
                      "docs": [
                        "Friends list must be sorted and free of duplicates"
                      ]
                    },
                    {
                      "name": "NotRecoverable",
                      "index": 5,
                      "docs": [
                        "This account is not set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "index": 6,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyStarted",
                      "index": 7,
                      "docs": [
                        "A recovery process has already started for this account"
                      ]
                    },
                    {
                      "name": "NotStarted",
                      "index": 8,
                      "docs": [
                        "A recovery process has not started for this rescuer"
                      ]
                    },
                    {
                      "name": "NotFriend",
                      "index": 9,
                      "docs": [
                        "This account is not a friend who can vouch"
                      ]
                    },
                    {
                      "name": "DelayPeriod",
                      "index": 10,
                      "docs": [
                        "The friend must wait until the delay period to vouch for this recovery"
                      ]
                    },
                    {
                      "name": "AlreadyVouched",
                      "index": 11,
                      "docs": [
                        "This user has already vouched for this recovery"
                      ]
                    },
                    {
                      "name": "Threshold",
                      "index": 12,
                      "docs": [
                        "The threshold for recovering this account has not been met"
                      ]
                    },
                    {
                      "name": "StillActive",
                      "index": 13,
                      "docs": [
                        "There are still active recovery attempts that need to be closed"
                      ]
                    },
                    {
                      "name": "AlreadyProxy",
                      "index": 14,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "BadState",
                      "index": 15,
                      "docs": [
                        "Some internal state is broken."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "sp_runtime",
                "ExtrinsicInclusionMode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AllExtrinsics",
                      "index": 0
                    },
                    {
                      "name": "OnlyInherents",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "sp_core",
                "OpaqueMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 266
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 266
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 36
                },
                {
                  "name": "E",
                  "type": 269
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 36
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 269
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 270,
                          "typeName": "InvalidTransaction"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "UnknownTransaction"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "index": 0
                    },
                    {
                      "name": "Payment",
                      "index": 1
                    },
                    {
                      "name": "Future",
                      "index": 2
                    },
                    {
                      "name": "Stale",
                      "index": 3
                    },
                    {
                      "name": "BadProof",
                      "index": 4
                    },
                    {
                      "name": "AncientBirthBlock",
                      "index": 5
                    },
                    {
                      "name": "ExhaustsResources",
                      "index": 6
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BadMandatory",
                      "index": 8
                    },
                    {
                      "name": "MandatoryValidation",
                      "index": 9
                    },
                    {
                      "name": "BadSigner",
                      "index": 10
                    },
                    {
                      "name": "IndeterminateImplicit",
                      "index": 11
                    },
                    {
                      "name": "UnknownOrigin",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "index": 0
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "index": 1
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "sp_inherents",
                "InherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "data",
                      "type": 273,
                      "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 137
                },
                {
                  "name": "V",
                  "type": 14
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 274
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "def": {
                "sequence": {
                  "type": 275
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "def": {
                "tuple": [
                  137,
                  14
                ]
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "sp_inherents",
                "CheckInherentsResult"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "okay",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "fatal_error",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "errors",
                      "type": 272,
                      "typeName": "InherentData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionSource"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InBlock",
                      "index": 0
                    },
                    {
                      "name": "Local",
                      "index": 1
                    },
                    {
                      "name": "External",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                },
                {
                  "name": "E",
                  "type": 269
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 279
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 269
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "ValidTransaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "priority",
                      "type": 12,
                      "typeName": "TransactionPriority"
                    },
                    {
                      "name": "requires",
                      "type": 59,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "provides",
                      "type": 59,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "longevity",
                      "type": 12,
                      "typeName": "TransactionLongevity"
                    },
                    {
                      "name": "propagate",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 14
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 14
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 282
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 282
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "def": {
                "sequence": {
                  "type": 283
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "def": {
                "tuple": [
                  14,
                  284
                ]
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 18,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "def": {
                "tuple": [
                  41,
                  41
                ]
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "RuntimeDispatchInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Weight",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "partial_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "FeeDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "inclusion_fee",
                      "type": 288,
                      "typeName": "Option<InclusionFee<Balance>>"
                    },
                    {
                      "name": "tip",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 289
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 289
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "InclusionFee"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "len_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "adjusted_weight_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                },
                {
                  "name": "E",
                  "type": 125
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 37
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 125
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 125
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 125
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "def": {
                "sequence": {
                  "type": 125
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "quantus_runtime",
                "RuntimeError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 138,
                          "typeName": "frame_system::Error<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 177,
                          "typeName": "pallet_balances::Error<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 180,
                          "typeName": "pallet_sudo::Error<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "QPoW",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "pallet_qpow::Error<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Wormhole",
                      "fields": [
                        {
                          "type": 182,
                          "typeName": "pallet_wormhole::Error<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 187,
                          "typeName": "pallet_vesting::Error<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "pallet_preimage::Error<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "pallet_scheduler::Error<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "pallet_utility::Error<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Referenda",
                      "fields": [
                        {
                          "type": 223,
                          "typeName": "pallet_referenda::Error<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "ReversibleTransfers",
                      "fields": [
                        {
                          "type": 228,
                          "typeName": "pallet_reversible_transfers::Error<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "ConvictionVoting",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "pallet_conviction_voting::Error<Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "TechCollective",
                      "fields": [
                        {
                          "type": 247,
                          "typeName": "pallet_ranked_collective::Error<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "TechReferenda",
                      "fields": [
                        {
                          "type": 251,
                          "typeName": "pallet_referenda::Error<Runtime, pallet_referenda::Instance1>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "MerkleAirdrop",
                      "fields": [
                        {
                          "type": 252,
                          "typeName": "pallet_merkle_airdrop::Error<Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "TreasuryPallet",
                      "fields": [
                        {
                          "type": 259,
                          "typeName": "pallet_treasury::Error<Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "type": 264,
                          "typeName": "pallet_recovery::Error<Runtime>"
                        }
                      ],
                      "index": 20
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "InherentsApplied",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether all inherents have been applied."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 14
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 19
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 121
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 123
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 120
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 126
                },
                "default": [
                  0
                ],
                "docs": [
                  " `Some` if a code upgrade has been authorized."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ExtrinsicWeightReclaimed",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " The weight reclaimed for the extrinsic.",
                  "",
                  " This information is available until the end of the extrinsic execution.",
                  " More precisely this information is removed in `note_applied_extrinsic`.",
                  "",
                  " Logic doing some post dispatch weight reduction must update this storage to avoid duplicate",
                  " reduction."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 56,
            "deprecation_info": {}
          },
          "event": {
            "ty": 22,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 127,
              "value": [
                194,
                160,
                231,
                102,
                0,
                11,
                0,
                96,
                222,
                251,
                116,
                5,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                34,
                97,
                201,
                25,
                0,
                1,
                11,
                184,
                255,
                170,
                3,
                140,
                3,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                166,
                1,
                11,
                0,
                200,
                230,
                188,
                23,
                4,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191,
                1,
                0,
                0,
                34,
                97,
                201,
                25,
                0,
                1,
                11,
                184,
                151,
                162,
                66,
                233,
                4,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                230,
                1,
                11,
                0,
                96,
                222,
                251,
                116,
                5,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                34,
                97,
                201,
                25,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "BlockLength",
              "ty": 130,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "DbWeight",
              "ty": 132,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "Version",
              "ty": 133,
              "value": [
                60,
                113,
                117,
                97,
                110,
                116,
                117,
                115,
                45,
                114,
                117,
                110,
                116,
                105,
                109,
                101,
                60,
                113,
                117,
                97,
                110,
                116,
                117,
                115,
                45,
                114,
                117,
                110,
                116,
                105,
                109,
                101,
                1,
                0,
                0,
                0,
                108,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                44,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                5,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                19,
                40,
                169,
                252,
                46,
                48,
                6,
                19,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                243,
                255,
                20,
                213,
                171,
                82,
                112,
                89,
                3,
                0,
                0,
                0,
                251,
                197,
                119,
                185,
                215,
                71,
                239,
                214,
                1,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's in-code version."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "SS58Prefix",
              "ty": 53,
              "value": [
                189,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 138,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": [
                " The aggregated `RuntimeCall` type."
              ]
            },
            {
              "name": "Nonce",
              "ty": 4,
              "docs": [
                " This stores the number of previous transactions associated with a sender account."
              ]
            },
            {
              "name": "Hash",
              "ty": 13,
              "docs": [
                " The output of the `Hashing` function."
              ]
            },
            {
              "name": "Hashing",
              "ty": 100,
              "docs": [
                " The hashing system (algorithm) being used in the runtime (e.g. Blake2)."
              ]
            },
            {
              "name": "AccountId",
              "ty": 0,
              "docs": [
                " The user account identifier type for the runtime."
              ]
            },
            {
              "name": "Block",
              "ty": 139,
              "docs": [
                " The Block type used by the runtime. This is used by `construct_runtime` to retrieve the",
                " extrinsics or other block specific data as needed."
              ]
            },
            {
              "name": "AccountData",
              "ty": 5,
              "docs": [
                " Data to be associated with an account (other than nonce/transaction counter, which this",
                " pallet does regardless)."
              ]
            }
          ],
          "view_functions": [],
          "index": 0,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current time for the current block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the timestamp has been updated in this block.",
                  "",
                  " This value is updated to `true` upon successful submission of a timestamp by a node.",
                  " It is then checked at the end of each block execution in the `on_finalize` hook."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 60,
            "deprecation_info": {}
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 12,
              "value": [
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks.",
                "",
                " Be aware that this is different to the *expected* period that the block production",
                " apparatus provides. Your chosen consensus system will generally work with this to",
                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                " period on default settings."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": null,
          "associated_types": [
            {
              "name": "Moment",
              "ty": 12,
              "docs": [
                " Type used for expressing a timestamp."
              ]
            }
          ],
          "view_functions": [],
          "index": 1,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 159
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                  "",
                  " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 163
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances.",
                  "",
                  " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 166
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 172
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "TransferProof",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 176,
                    "value": 37
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Transfer proofs for a wormhole transfers"
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "TransferCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 61,
            "deprecation_info": {}
          },
          "event": {
            "ty": 32,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 177,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeHoldReason",
              "ty": 168,
              "docs": [
                " The overarching hold reason."
              ]
            },
            {
              "name": "Balance",
              "ty": 6,
              "docs": [
                " The balance of an account."
              ]
            },
            {
              "name": "ReserveIdentifier",
              "ty": 137,
              "docs": [
                " The ID type for reserves.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "FreezeIdentifier",
              "ty": 174,
              "docs": [
                " The ID type for freezes."
              ]
            }
          ],
          "view_functions": [],
          "index": 2,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 178
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 179
                },
                "default": [
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 34,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": null,
          "associated_types": [],
          "view_functions": [],
          "index": 3,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 68,
            "deprecation_info": {}
          },
          "event": {
            "ty": 35,
            "deprecation_info": {}
          },
          "constants": [],
          "error": {
            "ty": 180,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": [
                " A sudo-able call."
              ]
            }
          ],
          "view_functions": [],
          "index": 4,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "QPoW",
          "storage": {
            "prefix": "QPoW",
            "entries": [
              {
                "name": "BlockDistanceThresholds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 41
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "LastBlockTime",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "LastBlockDuration",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "CurrentDistanceThreshold",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "TotalWork",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "BlocksInPeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "BlockTimeHistory",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "HistoryIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "HistorySize",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 39,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "InitialDistanceThresholdExponent",
              "ty": 4,
              "value": [
                246,
                1,
                0,
                0
              ],
              "docs": [
                " Pallet's weight info"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "DifficultyAdjustPercentClamp",
              "ty": 2,
              "value": [
                10
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "TargetBlockTime",
              "ty": 12,
              "value": [
                32,
                78,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "AdjustmentPeriod",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "BlockTimeHistorySize",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxReorgDepth",
              "ty": 4,
              "value": [
                180,
                0,
                0,
                0
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "FixedU128Scale",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Fixed point scale for calculations (default: 10^18)"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxDistanceMultiplier",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum distance threshold multiplier (default: 4)"
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 181,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 5,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Wormhole",
          "storage": {
            "prefix": "Wormhole",
            "entries": [
              {
                "name": "UsedNullifiers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 1,
                    "value": 8
                  }
                },
                "default": [
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 69,
            "deprecation_info": {}
          },
          "event": {
            "ty": 43,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MintingAccount",
              "ty": 0,
              "value": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
              ],
              "docs": [
                " Account ID used as the \"from\" account when creating transfer proofs for minted tokens"
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 182,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 6,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "MiningRewards",
          "storage": {
            "prefix": "MiningRewards",
            "entries": [
              {
                "name": "CollectedFees",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 44,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MinerBlockReward",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base block reward given to miners"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "TreasuryBlockReward",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base block reward given to treasury"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "TreasuryPalletId",
              "ty": 183,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury pallet ID"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MintingAccount",
              "ty": 0,
              "value": [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
              ],
              "docs": [
                " Account ID used as the \"from\" account when creating transfer proofs for minted tokens"
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": null,
          "associated_types": [],
          "view_functions": [],
          "index": 7,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 186
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 70,
            "deprecation_info": {}
          },
          "event": {
            "ty": 45,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxVestingSchedules",
              "ty": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": [],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 187,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 8,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 188
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ],
                "deprecation_info": {
                  "Deprecated": {
                    "note": "RequestStatusFor",
                    "since": null
                  }
                }
              },
              {
                "name": "RequestStatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 191
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 195,
                    "value": 196
                  }
                },
                "default": [
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 72,
            "deprecation_info": {}
          },
          "event": {
            "ty": 46,
            "deprecation_info": {}
          },
          "constants": [],
          "error": {
            "ty": 197,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 9,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "IncompleteBlockSince",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Tracks incomplete block-based agendas that need to be processed in a later block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "IncompleteTimestampSince",
                "modifier": "Optional",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0
                ],
                "docs": [
                  " Tracks incomplete timestamp-based agendas that need to be processed in a later block."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "LastProcessedTimestamp",
                "modifier": "Optional",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0
                ],
                "docs": [
                  " Tracks the last timestamp bucket that was fully processed.",
                  " Used to avoid reprocessing all buckets from 0 on every run."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 48,
                    "value": 198
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Retries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 202
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Retry configurations for items to be executed, indexed by task address."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 1,
                    "value": 49
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 74,
            "deprecation_info": {}
          },
          "event": {
            "ty": 47,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 10,
              "value": [
                11,
                0,
                128,
                75,
                150,
                93,
                4,
                19,
                204,
                204,
                204,
                204,
                204,
                204,
                204,
                204
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "TimestampBucketSize",
              "ty": 12,
              "value": [
                64,
                156,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Precision of the timestamp buckets.",
                "",
                " Timestamp based dispatches are rounded to the nearest bucket of this precision."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 203,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": [
                " The aggregated call type."
              ]
            },
            {
              "name": "Moment",
              "ty": 12,
              "docs": [
                " Moment type"
              ]
            }
          ],
          "view_functions": [],
          "index": 10,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 76,
            "deprecation_info": {}
          },
          "event": {
            "ty": 51,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 204,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": [
                " The overarching call type."
              ]
            },
            {
              "name": "PalletsOrigin",
              "ty": 78,
              "docs": [
                " The caller origin, overarching type of all pallets origins."
              ]
            }
          ],
          "view_functions": [],
          "index": 11,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 205
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "TrackQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 53,
                    "value": 213
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "DecidingCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 53,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of referenda being decided currently."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "MetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 81,
            "deprecation_info": {}
          },
          "event": {
            "ty": 52,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "SubmissionDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxQueued",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "UndecidingTimeout",
              "ty": 4,
              "value": [
                128,
                83,
                59,
                0
              ],
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "AlarmInterval",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "Tracks",
              "ty": 216,
              "value": [
                24,
                0,
                0,
                100,
                115,
                105,
                103,
                110,
                101,
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                5,
                0,
                0,
                0,
                0,
                64,
                99,
                82,
                191,
                198,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                192,
                168,
                0,
                0,
                128,
                58,
                9,
                0,
                192,
                168,
                0,
                0,
                128,
                81,
                1,
                0,
                0,
                0,
                202,
                154,
                59,
                128,
                85,
                200,
                32,
                0,
                39,
                185,
                41,
                0,
                0,
                202,
                154,
                59,
                128,
                240,
                250,
                2,
                128,
                178,
                230,
                14,
                1,
                0,
                100,
                115,
                105,
                103,
                110,
                97,
                108,
                105,
                110,
                103,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                20,
                0,
                0,
                0,
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                84,
                0,
                0,
                128,
                151,
                6,
                0,
                48,
                42,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                70,
                195,
                35,
                0,
                0,
                202,
                154,
                59,
                128,
                150,
                152,
                0,
                0,
                225,
                245,
                5,
                2,
                0,
                100,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                95,
                115,
                109,
                97,
                108,
                108,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                0,
                0,
                0,
                5,
                0,
                0,
                0,
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128,
                81,
                1,
                0,
                128,
                244,
                3,
                0,
                128,
                81,
                1,
                0,
                192,
                168,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                128,
                178,
                230,
                14,
                0,
                101,
                205,
                29,
                0,
                0,
                202,
                154,
                59,
                128,
                150,
                152,
                0,
                0,
                225,
                245,
                5,
                3,
                0,
                100,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                95,
                109,
                101,
                100,
                105,
                117,
                109,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                0,
                0,
                2,
                0,
                0,
                0,
                0,
                160,
                49,
                169,
                95,
                227,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                84,
                0,
                0,
                128,
                151,
                6,
                0,
                128,
                81,
                1,
                0,
                192,
                168,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                128,
                23,
                180,
                44,
                0,
                0,
                202,
                154,
                59,
                0,
                45,
                49,
                1,
                0,
                225,
                245,
                5,
                4,
                0,
                100,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                95,
                98,
                105,
                103,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                0,
                0,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                0,
                64,
                99,
                82,
                191,
                198,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128,
                81,
                1,
                0,
                128,
                58,
                9,
                0,
                0,
                163,
                2,
                0,
                192,
                168,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                128,
                54,
                190,
                38,
                128,
                248,
                169,
                50,
                0,
                0,
                202,
                154,
                59,
                128,
                240,
                250,
                2,
                128,
                209,
                240,
                8,
                5,
                0,
                100,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                95,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                101,
                114,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                128,
                198,
                164,
                126,
                141,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                2,
                0,
                0,
                117,
                18,
                0,
                0,
                70,
                5,
                0,
                128,
                81,
                1,
                0,
                0,
                0,
                202,
                154,
                59,
                128,
                23,
                180,
                44,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                225,
                245,
                5,
                128,
                178,
                230,
                14
              ],
              "docs": [
                " A list of tracks.",
                "",
                " Note: if the tracks are dynamic, the value in the static metadata might be inaccurate."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 223,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": []
            },
            {
              "name": "Votes",
              "ty": 6,
              "docs": [
                " The counting type for votes. Usually just balance."
              ]
            },
            {
              "name": "Tally",
              "ty": 102,
              "docs": [
                " The tallying type."
              ]
            }
          ],
          "view_functions": [],
          "index": 12,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "ReversibleTransfers",
          "storage": {
            "prefix": "ReversibleTransfers",
            "entries": [
              {
                "name": "HighSecurityAccounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 224
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maps accounts to their chosen reversibility delay period (in milliseconds).",
                  " Accounts present in this map have reversibility enabled."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "PendingTransfers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 225
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the details of pending transactions scheduled for delayed execution.",
                  " Keyed by the unique transaction ID."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "AccountPendingIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Indexes pending transaction IDs per account for efficient lookup and cancellation.",
                  " Also enforces the maximum pending transactions limit per account."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "PendingTransfersBySender",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 226
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maps sender accounts to their list of pending transaction IDs.",
                  " This allows users to query all their outgoing pending transfers."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "PendingTransfersByRecipient",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 226
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maps recipient accounts to their list of pending incoming transaction IDs.",
                  " This allows users to query all their incoming pending transfers."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "InterceptorIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 227
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Maps interceptor accounts to the list of accounts they can intercept for.",
                  " This allows the UI to efficiently query all accounts for which a given account is an",
                  " interceptor."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "GlobalNonce",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Global nonce for generating unique transaction IDs."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 84,
            "deprecation_info": {}
          },
          "event": {
            "ty": 103,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MaxPendingPerAccount",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum pending reversible transactions allowed per account. Used for BoundedVec."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxInterceptorAccounts",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of accounts an interceptor can intercept for. Used for BoundedVec."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "DefaultDelay",
              "ty": 48,
              "value": [
                0,
                128,
                81,
                1,
                0
              ],
              "docs": [
                " The default delay period for reversible transactions if none is specified.",
                "",
                " NOTE: default delay is always in blocks."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MinDelayPeriodBlocks",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum delay period allowed for reversible transactions, in blocks."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MinDelayPeriodMoment",
              "ty": 12,
              "value": [
                32,
                78,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum delay period allowed for reversible transactions, in milliseconds."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 228,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "Moment",
              "ty": 12,
              "docs": [
                " Moment type for scheduling."
              ]
            }
          ],
          "view_functions": [],
          "index": 13,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "entries": [
              {
                "name": "VotingFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 229,
                    "value": 230
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ClassLocksFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 238
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 85,
            "deprecation_info": {}
          },
          "event": {
            "ty": 109,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [
                128,
                58,
                9,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 241,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 14,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TechCollective",
          "storage": {
            "prefix": "TechCollective",
            "entries": [
              {
                "name": "MemberCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 53,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of members in the collective who have at least the rank according to the index",
                  " of the vec."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Members",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 242
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "IdToIndex",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 243,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The index of each ranks's member into the group of members who have at least that rank."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "IndexToId",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 244,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The members in the collective by index. All indices in the range `0..MemberCount` will",
                  " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 245,
                    "value": 111
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "VotingCleanup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 246
                  }
                },
                "default": [
                  0
                ],
                "docs": [],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 91,
            "deprecation_info": {}
          },
          "event": {
            "ty": 110,
            "deprecation_info": {}
          },
          "constants": [],
          "error": {
            "ty": 247,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 15,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TechReferenda",
          "storage": {
            "prefix": "TechReferenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 248
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "TrackQueue",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 53,
                    "value": 250
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "DecidingCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 53,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of referenda being decided currently."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "MetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 92,
            "deprecation_info": {}
          },
          "event": {
            "ty": 113,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "SubmissionDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxQueued",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "UndecidingTimeout",
              "ty": 4,
              "value": [
                128,
                83,
                59,
                0
              ],
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "AlarmInterval",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "Tracks",
              "ty": 216,
              "value": [
                4,
                0,
                0,
                100,
                116,
                101,
                99,
                104,
                95,
                99,
                111,
                108,
                108,
                101,
                99,
                116,
                105,
                118,
                101,
                95,
                109,
                101,
                109,
                98,
                101,
                114,
                115,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                128,
                198,
                164,
                126,
                141,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                128,
                81,
                1,
                0,
                100,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " A list of tracks.",
                "",
                " Note: if the tracks are dynamic, the value in the static metadata might be inaccurate."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 251,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": []
            },
            {
              "name": "Votes",
              "ty": 4,
              "docs": [
                " The counting type for votes. Usually just balance."
              ]
            },
            {
              "name": "Tally",
              "ty": 112,
              "docs": [
                " The tallying type."
              ]
            }
          ],
          "view_functions": [],
          "index": 16,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "MerkleAirdrop",
          "storage": {
            "prefix": "MerkleAirdrop",
            "entries": [
              {
                "name": "AirdropInfo",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 115
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores general info about an airdrop"
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Claimed",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 245,
                    "value": 37
                  }
                },
                "default": [],
                "docs": [
                  " Storage for claimed status"
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "NextAirdropId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Counter for airdrop IDs"
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 93,
            "deprecation_info": {}
          },
          "event": {
            "ty": 114,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "MaxProofs",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " The maximum number of proof elements allowed in a Merkle proof."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "PalletId",
              "ty": 183,
              "value": [
                97,
                105,
                114,
                100,
                114,
                111,
                112,
                33
              ],
              "docs": [
                " The pallet id, used for deriving its sovereign account ID."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "UnsignedClaimPriority",
              "ty": 12,
              "value": [
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Priority for unsigned claim transactions."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 252,
            "deprecation_info": {}
          },
          "associated_types": [],
          "view_functions": [],
          "index": 17,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TreasuryPallet",
          "storage": {
            "prefix": "TreasuryPallet",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                  " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                  "",
                  " Number of proposals that have been made."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 253
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                  " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                  "",
                  " Proposals that have been made."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Deactivated",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 254
                },
                "default": [
                  0
                ],
                "docs": [
                  " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                  " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                  "",
                  " Proposal indices that have been approved but not yet awarded."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "SpendCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The count of spends that have been made."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Spends",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 256
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Spends that have been approved and being processed."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "LastSpendPeriod",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " The blocknumber for the last triggered spend period."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 97,
            "deprecation_info": {
              "3": {
                "Deprecated": {
                  "note": "The `spend_local` call will be removed by May 2025. Migrate to the new flow and use the `spend` call.",
                  "since": null
                }
              },
              "4": {
                "Deprecated": {
                  "note": "The `remove_approval` call will be removed by May 2025. It associated with the deprecated `spend_local` call.",
                  "since": null
                }
              }
            }
          },
          "event": {
            "ty": 116,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                0,
                163,
                2,
                0
              ],
              "docs": [
                " Period between successive spends."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "Burn",
              "ty": 258,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "PalletId",
              "ty": 183,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " DEPRECATED: associated with `spend_local` call and will be removed in May 2025.",
                " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`.",
                "",
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "PayoutPeriod",
              "ty": 4,
              "value": [
                0,
                117,
                18,
                0
              ],
              "docs": [
                " The period during which an approved treasury spend has to be claimed."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "pot_account",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Gets this pallet's derived pot account."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 259,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "AssetKind",
              "ty": 37,
              "docs": [
                " Type parameter representing the asset kinds to be spent from the treasury."
              ]
            },
            {
              "name": "Beneficiary",
              "ty": 0,
              "docs": [
                " Type parameter used to identify the beneficiaries eligible to receive treasury spends."
              ]
            }
          ],
          "view_functions": [],
          "index": 18,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Origins",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "associated_types": [],
          "view_functions": [],
          "index": 19,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "entries": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 260
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 262,
                    "value": 263
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ],
                "deprecation_info": "NotDeprecated"
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ],
                "deprecation_info": "NotDeprecated"
              }
            ]
          },
          "calls": {
            "ty": 98,
            "deprecation_info": {}
          },
          "event": {
            "ty": 117,
            "deprecation_info": {}
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "FriendDepositFactor",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "MaxFriends",
              "ty": 4,
              "value": [
                9,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration.",
                "",
                " NOTE: The threshold programmed in this Pallet uses u16, so it does",
                " not really make sense to have a limit here greater than u16::MAX.",
                " But also, that is a lot more than you should probably set this value",
                " to anyway..."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "RecoveryDeposit",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "error": {
            "ty": 264,
            "deprecation_info": {}
          },
          "associated_types": [
            {
              "name": "RuntimeCall",
              "ty": 55,
              "docs": [
                " The overarching call type."
              ]
            }
          ],
          "view_functions": [],
          "index": 20,
          "docs": [],
          "deprecation_info": "NotDeprecated"
        }
      ],
      "extrinsic": {
        "versions": [
          4,
          5
        ],
        "address_ty": 62,
        "call_ty": 55,
        "signature_ty": 142,
        "transaction_extensions_by_version": {
          "0": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ]
        },
        "transaction_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 146,
            "implicit": 37
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 147,
            "implicit": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 148,
            "implicit": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 149,
            "implicit": 13
          },
          {
            "identifier": "CheckMortality",
            "ty": 150,
            "implicit": 13
          },
          {
            "identifier": "CheckNonce",
            "ty": 152,
            "implicit": 37
          },
          {
            "identifier": "CheckWeight",
            "ty": 153,
            "implicit": 37
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 154,
            "implicit": 37
          },
          {
            "identifier": "CheckMetadataHash",
            "ty": 155,
            "implicit": 50
          },
          {
            "identifier": "ReversibleTransactionExtension",
            "ty": 157,
            "implicit": 37
          }
        ]
      },
      "apis": [
        {
          "name": "Core",
          "methods": [
            {
              "name": "version",
              "inputs": [],
              "output": 133,
              "docs": [
                " Returns the version of the runtime."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "execute_block",
              "inputs": [
                {
                  "name": "block",
                  "ty": 139
                }
              ],
              "output": 37,
              "docs": [
                " Execute the given block."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "initialize_block",
              "inputs": [
                {
                  "name": "header",
                  "ty": 140
                }
              ],
              "output": 265,
              "docs": [
                " Initialize a block with the given header and return the runtime executive mode."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The `Core` runtime api that every Substrate runtime needs to implement."
          ],
          "version": 5,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "Metadata",
          "methods": [
            {
              "name": "metadata",
              "inputs": [],
              "output": 266,
              "docs": [
                " Returns the metadata of a runtime."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "metadata_at_version",
              "inputs": [
                {
                  "name": "version",
                  "ty": 4
                }
              ],
              "output": 267,
              "docs": [
                " Returns the metadata at a given version.",
                "",
                " If the given `version` isn't supported, this will return `None`.",
                " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "metadata_versions",
              "inputs": [],
              "output": 255,
              "docs": [
                " Returns the supported metadata versions.",
                "",
                " This can be used to call `metadata_at_version`."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The `Metadata` api trait that returns metadata for the runtime."
          ],
          "version": 2,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "BlockBuilder",
          "methods": [
            {
              "name": "apply_extrinsic",
              "inputs": [
                {
                  "name": "extrinsic",
                  "ty": 141
                }
              ],
              "output": 268,
              "docs": [
                " Apply the given extrinsic.",
                "",
                " Returns an inclusion outcome which specifies if this extrinsic is included in",
                " this block or not."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "finalize_block",
              "inputs": [],
              "output": 140,
              "docs": [
                " Finish the current block."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "inherent_extrinsics",
              "inputs": [
                {
                  "name": "inherent",
                  "ty": 272
                }
              ],
              "output": 158,
              "docs": [
                " Generate inherent extrinsics. The inherent data will vary from chain to chain."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "check_inherents",
              "inputs": [
                {
                  "name": "block",
                  "ty": 139
                },
                {
                  "name": "data",
                  "ty": 272
                }
              ],
              "output": 276,
              "docs": [
                " Check that the inherents are valid. The inherent data will vary from chain to chain."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The `BlockBuilder` api trait that provides the required functionality for building a block."
          ],
          "version": 6,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TaggedTransactionQueue",
          "methods": [
            {
              "name": "validate_transaction",
              "inputs": [
                {
                  "name": "source",
                  "ty": 277
                },
                {
                  "name": "tx",
                  "ty": 141
                },
                {
                  "name": "block_hash",
                  "ty": 13
                }
              ],
              "output": 278,
              "docs": [
                " Validate the transaction.",
                "",
                " This method is invoked by the transaction pool to learn details about given transaction.",
                " The implementation should make sure to verify the correctness of the transaction",
                " against current state. The given `block_hash` corresponds to the hash of the block",
                " that is used as current state.",
                "",
                " Note that this call may be performed by the pool multiple times and transactions",
                " might be verified in any possible order."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
          ],
          "version": 3,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "OffchainWorkerApi",
          "methods": [
            {
              "name": "offchain_worker",
              "inputs": [
                {
                  "name": "header",
                  "ty": 140
                }
              ],
              "output": 37,
              "docs": [
                " Starts the off-chain task for given block header."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The offchain worker api."
          ],
          "version": 2,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "SessionKeys",
          "methods": [
            {
              "name": "generate_session_keys",
              "inputs": [
                {
                  "name": "seed",
                  "ty": 280
                }
              ],
              "output": 14,
              "docs": [
                " Generate a set of session keys with optionally using the given seed.",
                " The keys should be stored within the keystore exposed via runtime",
                " externalities.",
                "",
                " The seed needs to be a valid `utf8` string.",
                "",
                " Returns the concatenated SCALE encoded public keys."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "decode_session_keys",
              "inputs": [
                {
                  "name": "encoded",
                  "ty": 14
                }
              ],
              "output": 281,
              "docs": [
                " Decode the given public session keys.",
                "",
                " Returns the list of public raw public keys + key type."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " Session keys runtime api."
          ],
          "version": 1,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "QPoWApi",
          "methods": [
            {
              "name": "verify_historical_block",
              "inputs": [
                {
                  "name": "header",
                  "ty": 1
                },
                {
                  "name": "nonce",
                  "ty": 40
                },
                {
                  "name": "block_number",
                  "ty": 4
                }
              ],
              "output": 8,
              "docs": [
                " Verify a nonce for a historical block that's already in the chain"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_nonce_distance",
              "inputs": [
                {
                  "name": "block_hash",
                  "ty": 1
                },
                {
                  "name": "nonce",
                  "ty": 40
                }
              ],
              "output": 41,
              "docs": [
                " calculate distance header with nonce to with nonce"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_max_reorg_depth",
              "inputs": [],
              "output": 4,
              "docs": [
                " Get the max possible reorg depth"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_max_distance",
              "inputs": [],
              "output": 41,
              "docs": [
                " Get the max possible distance_threshold for work calculation"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_difficulty",
              "inputs": [],
              "output": 41,
              "docs": [
                " Get the current difficulty (max_distance / distance_threshold)"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_distance_threshold",
              "inputs": [],
              "output": 41,
              "docs": [
                " Get the current distance_threshold target for proof generation"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_distance_threshold_at_block",
              "inputs": [
                {
                  "name": "block_number",
                  "ty": 4
                }
              ],
              "output": 41,
              "docs": [
                " Get distance_threshold at block"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_total_work",
              "inputs": [],
              "output": 41,
              "docs": [
                " Get total work"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_block_time_sum",
              "inputs": [],
              "output": 12,
              "docs": [
                " Get sum of block times in rolling history"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_median_block_time",
              "inputs": [],
              "output": 12,
              "docs": [
                " Get median block time for preconfigured list of elements"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_last_block_time",
              "inputs": [],
              "output": 12,
              "docs": [
                " Get last block timestamp"
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_last_block_duration",
              "inputs": [],
              "output": 12,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_chain_height",
              "inputs": [],
              "output": 4,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_random_rsa",
              "inputs": [
                {
                  "name": "block_hash",
                  "ty": 1
                }
              ],
              "output": 285,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "hash_to_group_bigint",
              "inputs": [
                {
                  "name": "h",
                  "ty": 41
                },
                {
                  "name": "m",
                  "ty": 41
                },
                {
                  "name": "n",
                  "ty": 41
                },
                {
                  "name": "solution",
                  "ty": 41
                }
              ],
              "output": 41,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "verify_nonce_on_import_block",
              "inputs": [
                {
                  "name": "block_hash",
                  "ty": 1
                },
                {
                  "name": "nonce",
                  "ty": 40
                }
              ],
              "output": 8,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "verify_nonce_local_mining",
              "inputs": [
                {
                  "name": "block_hash",
                  "ty": 1
                },
                {
                  "name": "nonce",
                  "ty": 40
                }
              ],
              "output": 8,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [],
          "version": 1,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "AccountNonceApi",
          "methods": [
            {
              "name": "account_nonce",
              "inputs": [
                {
                  "name": "account",
                  "ty": 0
                }
              ],
              "output": 4,
              "docs": [
                " Get current account nonce of given `AccountId`."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " The API to query account nonce."
          ],
          "version": 1,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TransactionPaymentApi",
          "methods": [
            {
              "name": "query_info",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 141
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 286,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_fee_details",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 141
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 287,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 10
                }
              ],
              "output": 6,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "ty": 4
                }
              ],
              "output": 6,
              "docs": [],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [],
          "version": 4,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "TransactionPaymentCallApi",
          "methods": [
            {
              "name": "query_call_info",
              "inputs": [
                {
                  "name": "call",
                  "ty": 55
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 286,
              "docs": [
                " Query information of a dispatch class, weight, and fee of a given encoded `Call`."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_call_fee_details",
              "inputs": [
                {
                  "name": "call",
                  "ty": 55
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 287,
              "docs": [
                " Query fee details of a given encoded `Call`."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 10
                }
              ],
              "output": 6,
              "docs": [
                " Query the output of the current `WeightToFee` given some input."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "ty": 4
                }
              ],
              "output": 6,
              "docs": [
                " Query the output of the current `LengthToFee` given some input."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [],
          "version": 3,
          "deprecation_info": "NotDeprecated"
        },
        {
          "name": "GenesisBuilder",
          "methods": [
            {
              "name": "build_state",
              "inputs": [
                {
                  "name": "json",
                  "ty": 14
                }
              ],
              "output": 290,
              "docs": [
                " Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the",
                " storage.",
                "",
                " In the case of a FRAME-based runtime, this function deserializes the full",
                " `RuntimeGenesisConfig` from the given JSON blob and puts it into the storage. If the",
                " provided JSON blob is incorrect or incomplete or the deserialization fails, an error",
                " is returned.",
                "",
                " Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no",
                " defaults will be used."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "get_preset",
              "inputs": [
                {
                  "name": "id",
                  "ty": 291
                }
              ],
              "output": 280,
              "docs": [
                " Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by",
                " `id`.",
                "",
                " If `id` is `None` the function should return JSON blob representation of the default",
                " `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default",
                " `RuntimeGenesisConfig`.",
                "",
                " Otherwise function returns a JSON representation of the built-in, named",
                " `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not",
                " exist. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of",
                " (potentially nested) key-value pairs that are intended for customizing the default",
                " runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation",
                " of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can",
                " be used in `build_state` method."
              ],
              "deprecation_info": "NotDeprecated"
            },
            {
              "name": "preset_names",
              "inputs": [],
              "output": 292,
              "docs": [
                " Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.",
                "",
                " The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If",
                " no named presets are provided by the runtime the list is empty."
              ],
              "deprecation_info": "NotDeprecated"
            }
          ],
          "docs": [
            " API to interact with `RuntimeGenesisConfig` for the runtime"
          ],
          "version": 1,
          "deprecation_info": "NotDeprecated"
        }
      ],
      "outer_enums": {
        "call_enum_ty": 55,
        "event_enum_ty": 21,
        "error_enum_ty": 293
      },
      "custom": {
        "map": {}
      }
    }
  }
]